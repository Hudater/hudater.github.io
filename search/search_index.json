{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my personal documentation","text":"<p>Centralized documentation for my Homelab, OS setup and possibly more This website grows per my convenience. I hope it may be useful to you too!  </p>","tags":["Home","Docs"]},{"location":"#service-listing","title":"Service Listing","text":"<p>Info</p> <p>This section links services I use in my lab Ticked options are the one deployed all the times  </p> <p>Warning</p> <p>For latest configs and compose files, visit my Github</p> Bare Metal <ul> <li> Networking<ul> <li> Adguard</li> <li> Cloudflare Tunnel</li> <li> Shadowsocks</li> </ul> </li> <li> Fileserver<ul> <li> Samba</li> <li> Syncthing</li> </ul> </li> <li> Management<ul> <li> OliveTin</li> </ul> </li> </ul> Docker - [CLICK TO EXPAND] <ul> <li> Media<ul> <li> Bazarr</li> <li> Flaresolverr</li> <li> Jellyfin</li> <li> Jellyseerr</li> <li> Prowlarr</li> <li> qBittorrent</li> <li> Radarr</li> <li> Requestrr</li> <li> Sonarr</li> </ul> </li> <li> Networking<ul> <li> Authelia</li> <li> Cloudflare-DDNS</li> <li> Cloudflare Tunnel</li> <li> DuckDNS</li> <li> Librespeed</li> <li> Rickroll</li> <li> Traefik</li> <li> WgEasy</li> </ul> </li> <li> Monitoring<ul> <li> Dozzle</li> <li> Heimdall</li> <li> Homarr</li> <li> Homer</li> <li> Scrutiny</li> <li> Uptime Kuma</li> </ul> </li> <li> Fileserver<ul> <li> Filebrowser</li> <li> Syncthing</li> </ul> </li> <li> Management<ul> <li> Portainer-CE</li> <li> Portainer-Agent</li> <li> Watchtower</li> </ul> </li> </ul>","tags":["Home","Docs"]},{"location":"#miscellaneous","title":"Miscellaneous","text":"<p>Info</p> <p>This section links Linux docs, dotfiles etc</p> Linux <ul> <li> Installation Guides<ul> <li> Arch Linux</li> <li> Docker</li> </ul> </li> <li> Setup Guides<ul> <li> Basic</li> <li> Desktop</li> <li> Server</li> </ul> </li> <li> Virtualization<ul> <li> Proxmox</li> </ul> </li> </ul>","tags":["Home","Docs"]},{"location":"extras/resources/","title":"Credits and Resources to people and sites I took inspiration from","text":"","tags":["Extras","Credits","Resources","Links"]},{"location":"extras/resources/#for-this-website","title":"For this website","text":"<ul> <li>Mkdocs Material</li> <li>Python Markdown Docs</li> <li>DIUN</li> <li>Shields on Homepage</li> <li>TRaSH Guides</li> </ul>","tags":["Extras","Credits","Resources","Links"]},{"location":"extras/resources/#ideas-for-your-lab","title":"Ideas for your lab","text":"<ul> <li>Awesome Selfhosted</li> <li>Awesome Sysadmin</li> <li>Awesome Selfhosted but better UI</li> <li>Descriptive Awesome Selfhosted</li> <li>Docker getting started by Selfhostedpro</li> <li>Front ends for various Applications</li> <li>GilbN's themes</li> <li>Hotio containers</li> <li>LinuxServer Fleet</li> <li>Shall not be named</li> </ul>","tags":["Extras","Credits","Resources","Links"]},{"location":"extras/resources/#boilerplates-blogs-and-wikis-of-other-selfhosters","title":"Boilerplates, Blogs and Wikis of other selfhosters","text":"<ul> <li>0xn3va's Cheat Sheet</li> <li>Abhilesh's Collection of compose files</li> <li>Arrs Wiki</li> <li>Funky Penguin's Documentation</li> <li>Geeked Wiki</li> <li>IBRACORP's Wiki</li> <li>Kenneth's blog</li> <li>LinuxServer Documentaion</li> <li>Mikeroyal Guides for various tech</li> <li>Noted.lol by Jeremy</li> <li>Perfect Media Server</li> <li>Pi-Hole documentation</li> <li>RPI Guide</li> <li>Selfhosted Show Wiki</li> <li>Smarthome Beginner Guide</li> <li>Techno Tim's Boilerplate</li> <li>Techno Tim's Wiki</li> <li>TRaSH's Guides</li> <li>Wise's blog</li> <li>Zilexa's Guide to Homeserver</li> </ul>","tags":["Extras","Credits","Resources","Links"]},{"location":"extras/resources/#other-useful-links","title":"Other Useful Links","text":"<ul> <li>Cloud Free Tier Comparison</li> <li>Docker run to Compose</li> <li>Font Awesome</li> </ul>","tags":["Extras","Credits","Resources","Links"]},{"location":"extras/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:bare-metal","title":"Bare Metal","text":"<ul> <li>            Adguard          </li> <li>            Cloudflare Tunnel          </li> <li>            Olivetin          </li> <li>            Samba          </li> <li>            Shadowsocks          </li> <li>            Syncthing          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:code","title":"Code","text":"<ul> <li>            Code Server          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:command-runner","title":"Command Runner","text":"<ul> <li>            Olivetin          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:credits","title":"Credits","text":"<ul> <li>            Resources          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:desktop","title":"Desktop","text":"<ul> <li>            Desktop          </li> <li>            Docker          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:docker","title":"Docker","text":"<ul> <li>            Authelia          </li> <li>            Bazarr          </li> <li>            Cloudflare DDNS          </li> <li>            Cloudflare Tunnel          </li> <li>            Code Server          </li> <li>            Dozzle          </li> <li>            DuckDNS          </li> <li>            Filebrowser          </li> <li>            Flaresolverr          </li> <li>            Heimdall          </li> <li>            Homarr          </li> <li>            Homer          </li> <li>            Jellyfin          </li> <li>            Jellyseerr          </li> <li>            Librespeed          </li> <li>            Portainer-Agent          </li> <li>            Portainer-CE          </li> <li>            Prowlarr          </li> <li>            Radarr          </li> <li>            Requestrr          </li> <li>            Rickroll          </li> <li>            Scrutiny          </li> <li>            Sonarr          </li> <li>            Syncthing          </li> <li>            Traefik          </li> <li>            Uptime Kuma          </li> <li>            Watchtower          </li> <li>            WgEasy          </li> <li>            qBittorrent          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:docs","title":"Docs","text":"<ul> <li>            Home          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:extras","title":"Extras","text":"<ul> <li>            Resources          </li> <li>            Templates          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:files","title":"Files","text":"<ul> <li>            Filebrowser          </li> <li>            Samba          </li> <li>            Syncthing          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:fileserver","title":"Fileserver","text":"<ul> <li>            Filebrowser          </li> <li>            Samba          </li> <li>            Syncthing          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:home","title":"Home","text":"<ul> <li>            Home          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:installation","title":"Installation","text":"<ul> <li>            Arch Linux          </li> <li>            Docker          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:links","title":"Links","text":"<ul> <li>            Resources          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:linux","title":"Linux","text":"<ul> <li>            Arch Linux          </li> <li>            Basic          </li> <li>            Desktop          </li> <li>            Docker          </li> <li>            Server          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:management","title":"Management","text":"<ul> <li>            Code Server          </li> <li>            Olivetin          </li> <li>            Portainer-Agent          </li> <li>            Portainer-CE          </li> <li>            Watchtower          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:media","title":"Media","text":"<ul> <li>            Bazarr          </li> <li>            Flaresolverr          </li> <li>            Jellyfin          </li> <li>            Jellyseerr          </li> <li>            Prowlarr          </li> <li>            Radarr          </li> <li>            Requestrr          </li> <li>            Sonarr          </li> <li>            qBittorrent          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:monitoring","title":"Monitoring","text":"<ul> <li>            Dozzle          </li> <li>            Heimdall          </li> <li>            Homarr          </li> <li>            Homer          </li> <li>            Scrutiny          </li> <li>            Uptime Kuma          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:networking","title":"Networking","text":"<ul> <li>            Adguard          </li> <li>            Authelia          </li> <li>            Cloudflare DDNS          </li> <li>            Cloudflare Tunnel          </li> <li>            DuckDNS          </li> <li>            Librespeed          </li> <li>            Rickroll          </li> <li>            Shadowsocks          </li> <li>            Traefik          </li> <li>            WgEasy          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:pve","title":"PVE","text":"<ul> <li>            Proxmox          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:resources","title":"Resources","text":"<ul> <li>            Resources          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:server","title":"Server","text":"<ul> <li>            Docker          </li> <li>            Proxmox          </li> <li>            Server          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:setup","title":"Setup","text":"<ul> <li>            Basic          </li> <li>            Desktop          </li> <li>            Docker          </li> <li>            Server          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:sharing","title":"Sharing","text":"<ul> <li>            Filebrowser          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:sync","title":"Sync","text":"<ul> <li>            Syncthing          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:templates","title":"Templates","text":"<ul> <li>            Templates          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/tags/#tag:virtualization","title":"Virtualization","text":"<ul> <li>            Proxmox          </li> </ul>","tags":["Extras","Tags"]},{"location":"extras/templates/","title":"This page consists of templates for docs, links etc","text":"","tags":["Extras","Templates"]},{"location":"extras/templates/#description","title":"Description","text":"<p>Give a basic description of the app here  </p>","tags":["Extras","Templates"]},{"location":"extras/templates/#bare-metal","title":"Bare Metal","text":"","tags":["Extras","Templates"]},{"location":"extras/templates/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>Package Name</code></li> <li> Official Wiki: Official Program Wiki</li> <li> Arch Wiki: Arch Wiki for Program</li> </ul>","tags":["Extras","Templates"]},{"location":"extras/templates/#getting-started","title":"Getting started","text":"<ul> <li> <p> Install PackageName package</p> ArchDebian/Ubuntu Bash<pre><code>sudo pacman -Sy packageName\n</code></pre> <p>Official Syncthing Guide</p> </li> <li> <p> Write further steps</p> </li> </ul>","tags":["Extras","Templates"]},{"location":"extras/templates/#docker","title":"Docker","text":"","tags":["Extras","Templates"]},{"location":"extras/templates/#basic-info_1","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>80</code></li> <li> Other Ports: <code>443</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: docs.HAops.dev</li> </ul>","tags":["Extras","Templates"]},{"location":"extras/templates/#docker-composeyml","title":"docker-compose.yml","text":"Basic compose manifest<pre><code>---\nversion: \"3\"\nservices:\n  serviceName:\n    image: MAINTAINER/IMAGE:latest #(1)\n    container_name: myContainer #(2)\n    restart: unless-stopped\n    volumes:\n      - \"${CFG_DIR}/containerCfgDir:/config\" #(3)\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n    ports:\n      - 80:80 #(4)\n    networks:\n      - proxy #(5)\n    labels:\n      traefik.enable: true\n      traefik.http.services.portainer.loadbalancer.server.port: portNumber #(6)\n\nnetworks:\n  proxy: #(7)\n    external: true\n</code></pre> <ol> <li>No tag defaults to <code>latest</code>    Best practice is to test your stuff with new image and pin the container to that version</li> <li>Name the container or docker would name it randomly    Name used by traefik to autogenerate route    i.e, <code>traefik.example.com</code></li> <li>Refer to variables guide</li> <li>Change port number on left side</li> <li>Same custom docker network as traefik</li> <li>Specific port for traefik to route traffic from for this container</li> <li>Specify your custom networks location here</li> </ol>","tags":["Extras","Templates"]},{"location":"extras/templates/#deploysh","title":"deploy.sh","text":"Bash<pre><code>#!/bin/sh\nmkdir -p ${CFG_DIR}/containerCfgDir #(1)\nmkdir -p ${CFG_DIR}/containerCfgDir/{multiple,subdirs} #(2)\ndocker compose up -d\n</code></pre> <ol> <li>Refer to variables guide </li> <li>Use braces for variables and subdirectory names. No quotes  </li> </ol>","tags":["Extras","Templates"]},{"location":"extras/templates/#template-for-link","title":"Template for link","text":"<ul> <li>ExampleLink</li> </ul> Link syntax<pre><code>- [DisplayName](linkPath \"HoverText\"){:target=\"_blank\" rel=\"noopener noreferrer\"}\n</code></pre>","tags":["Extras","Templates"]},{"location":"filesv/filebrowser/","title":"Filebrowser","text":"","tags":["Docker","Fileserver","Files","Sharing"]},{"location":"filesv/filebrowser/#description","title":"Description","text":"<p>Filebrowser is Web based file manager with basic auth, command runner, built-in file editor, file sharing with time-based expiry and much more  </p> <p>Note</p> <p>This service is deployed on multiple machines</p>","tags":["Docker","Fileserver","Files","Sharing"]},{"location":"filesv/filebrowser/#docker","title":"Docker","text":"","tags":["Docker","Fileserver","Files","Sharing"]},{"location":"filesv/filebrowser/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>420</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: FileBrowser.org</li> </ul>","tags":["Docker","Fileserver","Files","Sharing"]},{"location":"filesv/filebrowser/#docker-composeyml","title":"docker compose.yml","text":"AcerCloudPCPi4Share YAML<pre><code>---\nversion: '3'\nservices:\n  fbacer:\n    image: filebrowser/filebrowser:latest\n    container_name: fbacer\n    user: ${PUID}:${PGID}\n    ports:\n      - 420:80\n    networks:\n      - proxy # rename this to your custom docker network\n    volumes:\n      - ${DATA_DIR}:/srv\n      - ${BAK_CFG_DIR}/filebrowser/fbacer/filebrowser.db:/database.db\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n    command: --noauth #disables auth, don't use this if not using third party auth like authelia\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: '3'\nservices:\n  fbcloud:\n    image: filebrowser/filebrowser:latest\n    container_name: fbcloud\n    user: ${PUID}:${PGID}\n    ports:\n      - 420:80\n    networks:\n      - proxy # rename this to your custom docker network\n    labels:\n      traefik.enable: true\n    volumes:\n      - /:/srv\n      - ${BAK_CFG_DIR}/filebrowser/fbcloud/filebrowser.db:/database.db\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: '3'\nservices:\n  fbmain:\n    image: filebrowser/filebrowser:latest\n    container_name: fbmain\n    user: ${PUID}:${PGID}\n    ports:\n      - 420:80\n    networks:\n      - proxy # rename this to your custom docker network\n    volumes:\n      - /storage:/srv\n      - ${BAK_CFG_DIR}/filebrowser/fbmain/filebrowser.db:/database.db\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n    command: --noauth #disables auth, don't use this if not using third party auth like authelia\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: '3'\nservices:\n  fbpi:\n    image: filebrowser/filebrowser:latest\n    container_name: fbpi\n    user: ${PUID}:${PGID}\n    ports:\n      - 420:80\n    networks:\n      - proxy # rename this to your custom docker network\n    labels:\n      traefik.enable: true\n    volumes:\n      - /mnt/Pi_Storage/:/srv\n      - ${BAK_CFG_DIR}/filebrowser/fbpi/filebrowser.db:/database.db\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n    command: --noauth #disables auth, don't use this if not using third party auth like authelia\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: '3'\nservices:\n  fbshare:\n    image: filebrowser/filebrowser:latest\n    container_name: fbshare\n    user: ${PUID}:${PGID}\n    ports:\n      - 4290:80\n    networks:\n      - proxy # rename this to your custom docker network\n    volumes:\n      - ${DATA_DIR}:/srv\n      - ${BAK_CFG_DIR}/filebrowser/fbshare/filebrowser.db:/database.db\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Fileserver","Files","Sharing"]},{"location":"filesv/filebrowser/#deploysh","title":"deploy.sh","text":"AcerCloudPCPi4Share Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/filebrowser/fbacer\ntouch \"${BAK_CFG_DIR}\"/filebrowser/fbacer/filebrowser.db\ndocker compose up -d\n</code></pre> Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/filebrowser/fbcloud\ntouch \"${BAK_CFG_DIR}\"/filebrowser/fbcloud/filebrowser.db\ndocker compose up -d\n</code></pre> Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/filebrowser/fbmain\ntouch \"${BAK_CFG_DIR}\"/filebrowser/fbmain/filebrowser.db\ndocker compose up -d\n</code></pre> Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/filebrowser/fbpi\ntouch \"${BAK_CFG_DIR}\"/filebrowser/fbpi/filebrowser.db\ndocker compose up -d\n</code></pre> Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/filebrowser/fbshare\ntouch \"${BAK_CFG_DIR}\"/filebrowser/fbshare/filebrowser.db\ndocker compose up -d\n</code></pre>","tags":["Docker","Fileserver","Files","Sharing"]},{"location":"filesv/samba/","title":"Samba","text":"","tags":["Bare Metal","Fileserver","Files"]},{"location":"filesv/samba/#description","title":"Description","text":"<p>Samba is an implementation of SMB protocol. It serves as a general purpose file server in my LAN</p> <p>Note</p> <p>This service is deployed on multiple machines</p>","tags":["Bare Metal","Fileserver","Files"]},{"location":"filesv/samba/#bare-metal","title":"Bare Metal","text":"","tags":["Bare Metal","Fileserver","Files"]},{"location":"filesv/samba/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>samba</code></li> <li> Official Wiki: Official Samba Wiki</li> <li> Arch Wiki: Arch Wiki for Samba</li> </ul>","tags":["Bare Metal","Fileserver","Files"]},{"location":"filesv/samba/#smbconf","title":"smb.conf","text":"<p>Warning</p> <p>Change interface name in <code>interfaces</code> of <code>[global]</code> section Run <code>ip a</code> to find your ethernet port name</p> Media ServerPi Text Only<pre><code>[global]\n  workgroup = WORKGROUP\n  min protocol = SMB2\n  client min protocol = SMB2\n  server string = Media SMB\n  server role = standalone server\n  log file = /usr/local/samba/var/log.%m\n  max log size = 50\n  dns proxy = no\n\n[mdroot]\n  comment = Sharing root over samba for authed users\n  path = /\n  force user = hudater\n  force group = hudater\n  create mask = 0664\n  force create mode = 0664\n  directory mask = 0775\n  force directory mode = 0775\n  public = no\n  writable = yes\n  browsable = yes\n\n[mdmnt]\n  comment = Sharing MergerFS Folder publicly with no read-write\n  path = /mnt\n  force user = hudater\n  force group = hudater\n  create mask = 0664\n  force create mode = 0664\n  directory mask = 0775\n  force directory mode = 0775\n  public = yes\n  writable = no\n  browsable = yes\n</code></pre> Text Only<pre><code>[global]\n  workgroup = WORKGROUP\n  min protocol = SMB2\n  client min protocol = SMB2\n  server string = Pinux SMB\n  server role = standalone server\n  log file = /usr/local/samba/var/log.%m\n  max log size = 50\n  bind interfaces only = yes\n  interfaces = 127.0.0.0/8 lo eth0\n\n[pist]\n  comment = Sharing SSD Stoage over samba for all users\n  path = /mnt/Pi_Storage\n  force user = yourUserName\n  force group = yourUserName\n  create mask = 0664\n  force create mode = 0664\n  directory mask = 0775\n  force directory mode = 0775\n  public = yes\n  writable = no\n  browsable = yes\n\n[piroot]\n  comment = Sharing root over samba for authed users\n  path = /\n  force user = yourUserName\n  force group = yourUserName\n  create mask = 0664\n  force create mode = 0664\n  directory mask = 0775\n  force directory mode = 0775\n  public = no\n  writable = yes\n  browsable = yes\n</code></pre>","tags":["Bare Metal","Fileserver","Files"]},{"location":"filesv/samba/#setup","title":"Setup","text":"<ul> <li> <p> Install samba package</p> ArchDebian/Ubuntu Bash<pre><code>sudo pacman -Sy samba\n</code></pre> Bash<pre><code>sudo apt install samba\n</code></pre> </li> <li> <p> Copy smb config</p> Media ServerPi Bash<pre><code>sudo cp $SYNCFILES/configBak/samba/acer/acer.smb.conf /etc/samba/smb.conf\n</code></pre> Bash<pre><code>sudo cp $SYNCFILES/configBak/samba/pi/pi.smb.conf /etc/samba/smb.conf\n</code></pre> </li> <li> <p> Set smb password for user     Bash<pre><code>sudo smbpasswd -a $USER\n</code></pre></p> </li> <li> <p> Start and enable smb</p> ArchDebian/Ubuntu Bash<pre><code>sudo systemctl enable smb.service nmb.service --now\n</code></pre> Bash<pre><code>sudo systemctl enable smbd.service nmbd.service --now\n</code></pre> </li> <li> <p> To restart service:</p> ArchDebian/Ubuntu Bash<pre><code>sudo systemctl restart smb.service nmb.service --now\n</code></pre> Bash<pre><code>sudo systemctl restart smbd.service nmbd.service --now\n</code></pre> </li> </ul> <p>Info</p> <p>To mount smb share, refer to fstab guide</p>","tags":["Bare Metal","Fileserver","Files"]},{"location":"filesv/syncthing/","title":"Syncthing","text":"","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#description","title":"Description","text":"<p>Syncthing is a continuous file synchronization program. Synchronizes files between two or more computers in real time</p> <p>Note</p> <p>This service is deployed on multiple machines I personally use bare metal installation</p>","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#bare-metal","title":"Bare Metal","text":"","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>syncthing</code></li> <li> Official Wiki: Official Syncthing Wiki</li> <li> Arch Wiki: Arch Wiki for Syncthing</li> </ul>","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#getting-started","title":"Getting started","text":"<ul> <li> <p> Install Syncthing package</p> ArchDebian/Ubuntu Bash<pre><code>sudo pacman -Sy syncthing\n</code></pre> <p>Official Syncthing Guide</p> </li> <li> <p> Start and Enable syncthing service Bash<pre><code>sudo systemctl enable --now syncthing@$USER.service\n</code></pre></p> </li> <li> <p> Allow Web-GUI to be accesible to all addresses:     Bash<pre><code>sed -i 's/127.0.0.1:8384/0.0.0.0:8384/' ~/.config/syncthing/config.xml\n</code></pre></p> </li> <li> <p> Restart Syncthing service Bash<pre><code>sudo systemctl restart syncthing@$USER.service\n</code></pre></p> </li> <li> <p> Allow syncthing through firewall</p> UFWFirewalld <p>Syncthing's UFW Guide</p> <p>Syncthing's Firewalld Guide</p> </li> </ul> <p>Warning</p> <p>If you have selinux or apparmor enabled, create a policy allowing syncthing</p>","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#docker","title":"Docker","text":"","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#basic-info_1","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>8384</code></li> <li> Other Ports: <code>22000</code> <code>21027</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Syncthing.net</li> </ul>","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#docker-composeyml","title":"docker compose.yml","text":"YAML<pre><code>---\nversion: \"3.1\"\nservices:\n  syncthing:\n    image: linuxserver/syncthing:latest\n    container_name: sync\n    hostname: syncthing #optional\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n    volumes:\n      - \"${CFG_DIR}/syncthing:/config\"\n      - /home/$USER:/home_dir\n      - /:/root_dir\n    labels:\n      traefik.enable: true\n      traefik.http.services.portainer.loadbalancer.server.port: 8384\n    ports:\n      - 8384:8384\n      - 22000:22000/tcp\n      - 22000:22000/udp\n      - 21027:21027/udp\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"filesv/syncthing/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/syncthing\ndocker compose up -d\n</code></pre>","tags":["Bare Metal","Docker","Fileserver","Files","Sync"]},{"location":"linux/arch/","title":"Step-by-step Installation guide for Arch Linux","text":"<p>This page outlines a basic installation of Arch upon which you can build your system</p> <p>Info</p> <p>Having Arch wiki and installation guide open on your mobile or other computer can be useful</p>","tags":["Linux","Installation"]},{"location":"linux/arch/#prerequisites","title":"Prerequisites","text":"<ul> <li> Download the latest Arch ISO from official website. Preferably via Torrent since it doesn't load servers unnecessarily</li> <li> Copy ISO to your Ventoy USB</li> <li> Lookup your motherboard's BIOS key and boot to Arch Live Environment via Ventoy</li> </ul>","tags":["Linux","Installation"]},{"location":"linux/arch/#basic-setup-before-chroot","title":"Basic setup before chroot","text":"","tags":["Linux","Installation"]},{"location":"linux/arch/#connect-to-internet","title":"Connect to internet","text":"WiFiHard wired <p>Note</p> PlaceHolder Description Dummy Value <code>yourWiFiPassphrase</code> Password for your WiFi 123456qwerty <code>yourDeviceName</code> Your WiFi device on Computer wlan0 <code>yourWifiSSID</code> Your WiFi name or SSID Hudater One LinerDetailed Instructions <ul> <li> Get your wireless device name Most likely wlan0<pre><code>ip a\n</code></pre></li> <li> Change values according to your setup and execute command Bash<pre><code>iwctl --passphrase yourWiFiPassphrase station yourDeviceName connect yourWifiSSID\n</code></pre></li> <li> Command with Dummy Values Bash<pre><code>iwctl --passphrase 123456qwerty station wlan0 connect Hudater\n</code></pre></li> </ul> <ul> <li> Invoke interactive prompt for iwd Bash<pre><code>iwctl\n</code></pre></li> <li> List wireless devices Bash<pre><code>device list\n</code></pre></li> <li> Scan initiation Bash<pre><code>station yourDeviceName scan\n</code></pre></li> <li> List all available WiFi networks Bash<pre><code>station yourDeviceName get-networks\n</code></pre></li> <li> Connect to desired network via SSID Bash<pre><code>station yourDeviceName connect yourWifiSSID\n</code></pre></li> </ul> <ul> <li> If you are hard-wired via Ethernet or Fiber to your computer, you will likely get an IP assigned via DHCP  </li> <li> Verify connection by pinging some website Bash<pre><code>ping gnu.org\n</code></pre></li> <li> If you don't have connection check your interface Bash<pre><code>ip a\n</code></pre></li> <li> If interface is down or doesn't have an IP, troubleshoot from the wiki</li> </ul>","tags":["Linux","Installation"]},{"location":"linux/arch/#enable-ntp-for-system-clock","title":"Enable NTP for system clock","text":"Bash<pre><code>timedatectl set-ntp true\n</code></pre> <ul> <li> Check if NTP is active Bash<pre><code>timedatectl\n</code></pre></li> </ul>","tags":["Linux","Installation"]},{"location":"linux/arch/#disk-setup","title":"Disk Setup","text":"","tags":["Linux","Installation"]},{"location":"linux/arch/#partiton-disk","title":"Partiton Disk","text":"<p>Warning</p> <p>For help, type <code>m</code> and <code>q</code> to quit without writing <code>++keyName++</code> means keyName to be pressed. It's not rendered inside code block</p> <ul> <li> Execute fdisk with destination drive</li> </ul> Bash<pre><code>fdisk /dev/nvme0n1\n</code></pre> <ul> <li> Create new partition table. IT WILL ERASE WHOLE DISK</li> </ul> Bash<pre><code>g\n</code></pre> <ul> <li> Create two new partitions for <code>/boot</code> and <code>/</code></li> </ul> BOOTROOT Bash<pre><code>n\n++enter++ #(1)\n++enter++\n+512M #(2)\nt #(3)\n1\n</code></pre> <ol> <li>Press Enter twice</li> <li>512MB <code>/boot</code> or <code>boot</code> partition</li> <li>Change partition type for <code>/boot</code> to <code>EFI</code></li> </ol> Bash<pre><code>n\n++enter++ #(1)\n++enter++\n+150G #(2)\n</code></pre> <ol> <li>Press Enter twice</li> <li>150GB <code>/</code> or <code>root</code> partition</li> </ol> <ul> <li> Write your changes</li> </ul> Bash<pre><code>w\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#make-filesystem","title":"Make Filesystem","text":"<ul> <li> Run <code>lsblk</code> to find device names</li> </ul> Bash<pre><code>lsblk\n</code></pre> lsblk output Bash<pre><code>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nnvme0n1     259:0    0 465.8G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0   512M  0 part\n\u251c\u2500nvme0n1p2 259:2    0   150G  0 part\n</code></pre> <ul> <li> Create filesystem on both partitions</li> </ul> BOOTROOT Bash<pre><code>mkfs.fat -F32 /dev/nvme0n1p1\n</code></pre> Bash<pre><code>mkfs.ext4 /dev/nvme0n1p2\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#mount-partitions","title":"Mount partitions","text":"<p>Warning</p> <p>Mount <code>ROOT</code> partition first</p> ROOTBOOT Bash<pre><code>mount /dev/nvme0n1p2 /mnt\n</code></pre> Bash<pre><code>mkdir /mnt/boot\nmount /dev/nvme0n1p1 /mnt/boot\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#install-base-system","title":"Install base system","text":"<p>Note</p> <p>Change the kernel and kernel-headers if you desire so Add or remove programs as you like</p> Bash<pre><code>pacstrap -i /mnt base base-devel linux-zen linux-zen-headers linux-firmware vim git stow openssh mtools dosfstools networkmanager network-manager-applet wireless_tools wpa_supplicant dialog\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#generate-fstab","title":"Generate FSTab","text":"Bash<pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#after-chroot","title":"After Chroot","text":"Chroot into the installation now<pre><code>arch-chroot /mnt\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#symlink-localtime","title":"Symlink localtime","text":"Bash<pre><code>ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#sync-hardware-clock","title":"Sync Hardware Clock","text":"Bash<pre><code>hwclock --systohc\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#localization-and-host","title":"Localization and Host","text":"","tags":["Linux","Installation"]},{"location":"linux/arch/#localegen","title":"Locale.gen","text":"<ul> <li> Uncomment desired locale [<code>en_US.UTF-8 UTF-8</code>] Bash<pre><code>vim /etc/locale.gen\n</code></pre></li> </ul> <p>Tip</p> <p>Search in vim using :+/ then your locale i.e, <code>en_US</code> and press <code>n</code> to forward and uncomment <code>UTF-8</code> version between the file</p>","tags":["Linux","Installation"]},{"location":"linux/arch/#localeconf","title":"Locale.conf","text":"Bash<pre><code>echo \"LANG=en_US.UTF-8\" &gt;&gt; /etc/locale.conf\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#generate-locale","title":"Generate Locale","text":"Bash<pre><code>locale-gen\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#hostname","title":"Hostname","text":"Bash<pre><code>echo \"pc\" &gt;&gt; /etc/hostname\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#hosts","title":"Hosts","text":"vim /etc/hosts<pre><code># Static table lookup for hostnames.\n# See hosts(5) for details.\n127.0.0.1   localhost.lan   localhost\n::1         localhost.lan   localhost\n127.0.0.1   pc.lan          pc\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#bootloader","title":"Bootloader","text":"","tags":["Linux","Installation"]},{"location":"linux/arch/#refind","title":"Refind","text":"<ul> <li> <p> Install packages Bash<pre><code>pacman -Sy refind efibootmgr\n</code></pre></p> </li> <li> <p> Install refind on drive Use BOOT Partition device name here<pre><code>refind-install --usedefault /dev/nvme0n1p1 --alldrivers\n</code></pre></p> </li> <li> <p> Generate refind config Bash<pre><code>mkrlconf\n</code></pre></p> </li> <li> <p> Edit refind config</p> </li> </ul> <p>Warning</p> <p>Change PARTUUID of root partition using <code>blkid</code> </p> vim /boot/refind_linux.conf<pre><code>\"Boot with minimal options\" \"ro root=PARTUUID=32768bfc-d092-224b-b36e-0b415dcf40c5\"\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#pacman","title":"Pacman","text":"<ul> <li> <p> Edit pacman config Bash<pre><code>vim /etc/pacman.conf\n</code></pre></p> </li> <li> <p> Enable Parallel Downloads and Colors Bash<pre><code>Color\nILoveCandy\nParallelDownloads = 5\n</code></pre></p> </li> <li> <p> Enable Multilib support Bash<pre><code>[multilib]\nInclude = /etc/pacman.d/mirrorlist\n</code></pre></p> </li> <li> <p> Fix mirrors with <code>reflector</code> Install reflector first<pre><code>sudo reflector --latest 50 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist\n</code></pre></p> </li> </ul>","tags":["Linux","Installation"]},{"location":"linux/arch/#users-and-sudo","title":"Users and Sudo","text":"<ul> <li> <p> Set root password Bash<pre><code>passwd root\n</code></pre></p> </li> <li> <p> Create standard user Bash<pre><code>useradd -m -u 1000 -G wheel hudater\n</code></pre></p> </li> <li> <p> Password for standard user Bash<pre><code>passwd hudater\n</code></pre></p> </li> <li> <p> Edit sudoers file</p> </li> </ul> EDITOR=vim visudo<pre><code>@includedir /etc/sudoers.d #(1)\nDefaults        insults\nDefaults        env_reset,timestamp_timeout=60 #(2)\n%wheel ALL=(ALL) ALL\nALL ALL=NOPASSWD: /sbin/poweroff,/sbin/reboot,/sbin/shutdown\n</code></pre> <ol> <li>Move this line to top for passwordless commands to work</li> <li>This CAN BE a security risk. Not suggested to use</li> </ol>","tags":["Linux","Installation"]},{"location":"linux/arch/#services","title":"Services","text":"<p>systemd-timesyncd sshd Network-Manager</p> <p>Success</p> <p>Basic Arch installation is complete here. Reboot now to your new installation</p>","tags":["Linux","Installation"]},{"location":"linux/arch/#post-installation","title":"Post Installation","text":"<p>Warning</p> <p>Install <code>chaotic-aur</code> after enabling NTP</p>","tags":["Linux","Installation"]},{"location":"linux/arch/#wifi","title":"Wifi","text":"<p>sudo nmtui wifi</p>","tags":["Linux","Installation"]},{"location":"linux/arch/#package-manager","title":"Package Manager","text":"Chaotic-AURParu <p>Warning</p> <p>Visit official website for latest installation steps if out-of-date here</p> <ul> <li> <p> Install Primary key, Keyring and Mirrorlist Bash<pre><code>sudo pacman-key --recv-key FBA220DFC880C036 --keyserver keyserver.ubuntu.com &amp;&amp;\\\npacman-key --lsign-key FBA220DFC880C036 &amp;&amp;\\\npacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'\n</code></pre></p> </li> <li> <p> Add Mirrorlist to <code>pacman.conf</code> vim /etc/pacman.conf<pre><code>[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist\n</code></pre></p> </li> </ul> <ul> <li> <p> Install Paru from Chaotic-AUR Bash<pre><code>pacman -Sy paru\n</code></pre></p> </li> <li> <p> Edit Paru config Bash<pre><code>sudoedit /etc/paru.conf\n</code></pre></p> </li> <li> <p> Uncomment these options Bash<pre><code>BottomUp\nSudoLoop\n</code></pre></p> </li> </ul>","tags":["Linux","Installation"]},{"location":"linux/arch/#packages","title":"Packages","text":"","tags":["Linux","Installation"]},{"location":"linux/arch/#basic-packages","title":"Basic packages","text":"Bash<pre><code>paru -Sy absolutely-proprietary alacritty android-file-transfer android-tools anydesk-bin arandr authy awesome bat bpytop brave-bin chromium corectrl cpufetch-git curl dialog discord dosfstools drawio-desktop-bin duf exa feh firefox ffmpeg gimp git go gparted htop imwheel iperf3 kitty libreoffice-still lshw lxappearance-gtk3 mpv mtools nano nautilus nautilus-copy-path ncdu neofetch neovim network-manager-applet networkmanager nfs-utils nitrogen nmap noto-fonts noto-fonts-emoji noto-fonts-extra ntfs-3g numlockx nvtop openbsd-netcat openssh otf-font-awesome picom-ibhagwan-git python-pip qt5-styleplugins qt5ct radeontop redshift reflector rofi rpi-imager-bin rsync samba scrot sshfs starship stow sxiv syncthing tldr traceroute ttf-font-awesome ttf-ms-fonts unrar unzip ventoy-bin vi vim volumeicon vscodium-bin vscodium-bin-marketplace wget wireless_tools woeusb wol wpa_supplicant xclip xorg xorg-xinit xterm youtube-dl zathura zathura-pdf-mupdf zsh --noconfirm\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#audio-packages","title":"Audio Packages","text":"Bash<pre><code>paru -Sy pipewire pipewire-pulse pavucontrol wireplumber --noconfirm\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#gpu-drivers","title":"GPU Drivers","text":"","tags":["Linux","Installation"]},{"location":"linux/arch/#amd","title":"AMD","text":"Bash<pre><code>paru -Sy xf86-video-amdgpu lib32-mesa vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver vulkan-icd-loader lib32-vulkan-icd-loader --noconfirm\n</code></pre>","tags":["Linux","Installation"]},{"location":"linux/arch/#intel","title":"Intel","text":"Bash<pre><code>paru -Sy mesa lib32-mesa --noconfirm\n</code></pre> <p>Success</p> <p>Move onto Basic setup guide now</p>","tags":["Linux","Installation"]},{"location":"linux/basic/","title":"Basic Linux Setup","text":"<p>This page would define setup of basic installation with my bare minimum to get further the installation to either a server or desktop usecase</p> <p>Info</p> <p>Run these using your standard user with sudo if required</p>","tags":["Linux","Setup"]},{"location":"linux/basic/#dotfiles","title":"DotFiles","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#create-useful-directories","title":"Create Useful Directories","text":"<p>Bash<pre><code>mkdir -pv ~/Bench/Mount $SYNCFILES\n</code></pre> Extra for Desktop<pre><code>mkdir -pv ~/Downloads\n</code></pre></p>","tags":["Linux","Setup"]},{"location":"linux/basic/#syncthing","title":"Syncthing","text":"<ul> <li> Install Syncthing</li> <li> Sync <code>$SYNCFILES</code> folder with following ignore patterns Bash<pre><code>.git\ndotsPr/ssh/.ssh/known_hosts\ndotsPr/ssh/.ssh/known_hosts.old\ndb\nconfigBak/authelia\nconfigBak/authelia-cloud\nconfigBak/fenrus\n</code></pre></li> <li> Sync <code>PC-Walls</code> with Desktops</li> </ul>","tags":["Linux","Setup"]},{"location":"linux/basic/#symlink-dotfiles","title":"Symlink dotfiles","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#dots","title":"dots","text":"Media ServerPCPi cd $SYNCFILES/dots<pre><code>stow -vt ~ debSvMisc/ bpytop/ htop/ neofetch/ nvim/ templates/ vim/ zsh/\n</code></pre> cd $SYNCFILES/dots<pre><code>stow -vt ~ alacritty/ awesome/ bpytop/ compton/ htop/ kitty/ neofetch/ nitrogen/ nvim/ pcMisc/ pcVol/ rofi/ templates/ theming/ vim/ zsh/\n</code></pre> cd $SYNCFILES/dots<pre><code>stow -vt ~ bpytop/ htop/ neofetch/ nvim/ templates/ piMisc/ vim/ zsh/\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#dotspr","title":"dotsPr","text":"Media ServerPCPi cd $SYNCFILES/dotsPr<pre><code>stow -vt ~ debSvHome/ env/ git/ ssh/\n</code></pre> cd $SYNCFILES/dotsPr<pre><code>stow -vt ~ env/ git/ pcHome/ redshift/ ssh/\n</code></pre> cd $SYNCFILES/dotsPr<pre><code>stow -vt ~ env/ git/ piHome/ ssh/\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#vim-plug","title":"Vim Plug","text":"<ul> <li> Install Plug</li> </ul> VimNeoVim vim<pre><code>curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n</code></pre> nvim<pre><code>sh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n</code></pre> <ul> <li> Install Plugins specified in config files</li> </ul> VimNeoVim <ul> <li> Open <code>vim</code></li> <li> Enter command mode by typing Esc+: </li> <li> Type <code>PlugInstall</code> and hit Enter</li> </ul> <ul> <li> Open <code>nvim</code></li> <li> Enter command mode by typing Esc+: </li> <li> Type <code>PlugInstall</code> and hit Enter</li> </ul>","tags":["Linux","Setup"]},{"location":"linux/basic/#dns","title":"DNS","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#systemd-resolved","title":"systemd-resolved","text":"Bash<pre><code>sudo systemctl enable systemd-resolved.service --now\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#ntp","title":"NTP","text":"<ul> <li> Symlink <code>/etc/localtime</code> Bash<pre><code>ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\n</code></pre></li> <li> Enable timesync service Bash<pre><code>sudo systemctl enable systemd-timesyncd.service --now\n</code></pre></li> <li> Check status Bash<pre><code>timedatectl\n</code></pre></li> </ul>","tags":["Linux","Setup"]},{"location":"linux/basic/#shell","title":"Shell","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#sh-symlink","title":"Sh symlink","text":"ArchDebian/Ubuntu <p>Install <code>dashbinsh</code> from AUR Bash<pre><code>paru -S dashbinsh --noconfirm\n</code></pre></p> <p>Already comes with sh pointing to dash</p>","tags":["Linux","Setup"]},{"location":"linux/basic/#starship-prompt","title":"Starship Prompt","text":"ArchDebian/Ubuntu Bash<pre><code>sudo pacman -S starship --noconfirm\n</code></pre> Bash<pre><code>curl -sS https://starship.rs/install.sh | sh\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#user-shell-to-zsh","title":"User Shell to ZSH","text":"<ul> <li> To change shell to zsh Run as user whose shell you want to change, NOT ROOT OR SUDO<pre><code>chsh -s $(which zsh)\n</code></pre></li> </ul> <p>Tip</p> <p>If you're using bash and your bashrc won't load, read this Happened to me on Pi-Zero</p>","tags":["Linux","Setup"]},{"location":"linux/basic/#zram-swap-and-swappiness","title":"Zram-Swap and Swappiness","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#installation","title":"Installation","text":"ArchUbuntu <ul> <li> <p> Install directly from AUR Bash<pre><code>paru -S zram-swap-git --noconfirm\n</code></pre></p> </li> <li> <p> Start and Enable service Bash<pre><code>sudo systemctl enable --now zram-swap.service\n</code></pre></p> </li> </ul> <ul> <li> <p> Install <code>linux-modules</code></p> x86_64rpi4 Bash<pre><code>sudo nala install linux-generic -y\n</code></pre> Bash<pre><code>sudo nala install linux-modules-extra-raspi -y\n</code></pre> </li> <li> <p> Clone <code>zram-swap</code> repo Bash<pre><code>git clone https://github.com/foundObjects/zram-swap.git\n</code></pre></p> </li> <li> <p> Install from repo's script Bash<pre><code>cd zram-swap &amp;&amp; sudo ./install.sh\n</code></pre></p> </li> <li> <p> Remove <code>/swapfile</code> and <code>fstab</code> Bash<pre><code>sudo swapoff /swap.img\nsudo vim /etc/fstab and remove swapfile #TODO sed it\nsudo rm /swap.img\n</code></pre></p> </li> </ul>","tags":["Linux","Setup"]},{"location":"linux/basic/#swappiness-value","title":"Swappiness value","text":"Bash<pre><code>sudo tee -a /etc/sysctl.d/99-swappiness.conf &gt; /dev/null &lt;&lt;EOT\nvm.swappiness=10\nEOT\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#mkdocs-material","title":"Mkdocs Material","text":"<ul> <li> <p> Install <code>python</code> and <code>pip</code></p> ArchDebian/Ubuntu Bash<pre><code>sudo pacman -Sy python python-pip --noconfirm\n</code></pre> Bash<pre><code>sudo apt update &amp;&amp; sudo apt install python3 python3-pip -y\n</code></pre> </li> <li> <p> CD into mkdocs folder     Bash<pre><code>cd $SYNCFILES/hudater.github.io\n</code></pre></p> </li> <li> <p> Install requirements from file     Bash<pre><code>pip3 install -r docs/requirements.txt\n</code></pre></p> </li> </ul>","tags":["Linux","Setup"]},{"location":"linux/basic/#not-necessary-but-might-be-useful","title":"Not necessary but might be useful","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#ssh","title":"SSH","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#fix-ssh-permissions-after-stow","title":"Fix SSH permissions after stow","text":"Bash<pre><code>sudo chmod 755 /home/$USER &amp;&amp; \\\nsudo chmod 755 /home/$USER/GitIt -R &amp;&amp; \\\nsudo chmod 700 /home/$USER/GitIt/SyncFiles/dotsPr/ssh/.ssh &amp;&amp; \\\nsudo chmod 600 /home/$USER/GitIt/SyncFiles/dotsPr/ssh/.ssh/*\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#selinux","title":"SELinux","text":"<p>If SELinux is enforcing, allow SSH policy Bash<pre><code>restorecon -R -v /home/$USER/.ssh\n</code></pre></p>","tags":["Linux","Setup"]},{"location":"linux/basic/#sudo-setup-as-your-root-user","title":"Sudo setup as your root user","text":"EDITOR=nvim visudo<pre><code>@includedir /etc/sudoers.d #(1)\nDefaults        insults\nDefaults        env_reset,timestamp_timeout=60 #(2)\n%wheel ALL=(ALL) ALL #(3)\nALL ALL=NOPASSWD: /sbin/poweroff,/sbin/reboot,/sbin/shutdown\n</code></pre> <ol> <li>Move this line to top for passwordless commands to work</li> <li>This CAN BE a security risk. Not suggested to use</li> <li>Change <code>wheel</code> group to <code>sudo</code> if required</li> </ol>","tags":["Linux","Setup"]},{"location":"linux/basic/#user-setup","title":"User Setup","text":"","tags":["Linux","Setup"]},{"location":"linux/basic/#create-user","title":"Create user","text":"UID and GID is 1000<pre><code>sudo useradd -m -u 1000 -G sudo,plugdev,video,adm userName\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/basic/#change-username-with-home-and-group","title":"Change Username with home and group","text":"Change Usernames accordingly<pre><code>usermod -l newUserName -d /home/newUserName -m oldUserName\ngroupmod -n newUserName oldUserName\n</code></pre>","tags":["Linux","Setup"]},{"location":"linux/desktop/","title":"Desktop Linux Setup","text":"<p>This page would define additional setup for my Desktop instance</p> <p>Info</p> <p>Run these using your standard user with sudo if required  </p>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#fonts","title":"Fonts","text":"<ul> <li> CD into <code>Bench</code> directory Bash<pre><code>cd ~/Bench\n</code></pre></li> <li> Clone Fonts repo Bash<pre><code>git clone git@github.com:Hudater/Fonts.git\n</code></pre></li> <li> Copy fonts to global fonts repo Bash<pre><code>sudo find Fonts/* -maxdepth 0 -type f,d ! -name 'LICENSE' ! -name 'README.md' -exec cp -rt /usr/local/share/fonts/ {} +\n</code></pre></li> <li> Re-generate Font cache Bash<pre><code>sudo fc-cache -f -v\n</code></pre></li> </ul>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#fstab","title":"FStab","text":"<p>Warning</p> <p>FStab is mounted serial-wise, so lookout for depending mounts Mount <code>ROOT</code> and <code>BOOT</code> before any other mounts</p>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#local-storage","title":"Local Storage","text":"<ul> <li> <p> Create <code>/storage</code> directory with correct permissions Bash<pre><code>sudo mkdir -pv /storage &amp;&amp;\\\nsudo chown $USER:$USER /storage -R\n</code></pre></p> </li> <li> <p> Find <code>UUID</code> of desired partiton Bash<pre><code>lsblk -f\n</code></pre></p> lsblk output Bash<pre><code>NAME   FSTYPE FSVER LABEL   UUID                                 FSAVAIL FSUSE% MOUNTPOINTS\nsda                                                                             \n\u251c\u2500sda1 vfat   FAT32         06FB-2B2F                             435.8M    15% /boot\n\u251c\u2500sda2 ext4   1.0           a92c4d62-2c87-4f5b-a4cc-3a96c926232e  124.9G    10% /\n\u2514\u2500sda3 ext4   1.0   STORAGE a1effe8d-b376-4d1c-b53a-5b46dde3d026                \nzram0                                                                           [SWAP]\n</code></pre> </li> <li> <p> Add entry to <code>fstab</code> sudoedit /etc/fstab<pre><code># /dev/sda3 Local Storage block\nUUID=a1effe8d-b376-4d1c-b53a-5b46dde3d026 /storage  ext4  rw,relatime,defaults  0 2\n</code></pre></p> </li> <li> <p> Fix permissions if required Bash<pre><code>sudo chown $USER:$USER /storage -R\n</code></pre></p> </li> </ul>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#smb","title":"SMB","text":"<ul> <li> <p> Create <code>lab</code> and <code>mountDirs</code> with correct persmissions Bash<pre><code>sudo mkdir -pv /lab/{mdroot,piroot} &amp;&amp;\\\nsudo chown $USER:$USER /lab -R\n</code></pre></p> </li> <li> <p> Add SMB mount commands after mounting root, boot, home and other system partitions sudoedit /etc/fstab<pre><code>##########################SMB#############################\n#\n#\n###Media server smb server mount\n#\n//media.lan/mdroot  /lab/mdroot  cifs username=USER,password=smbPassword,uid=1000,gid=1000,workgroup=workgroup  0 2\n#\n##rpi4 smb server mount\n#\n//pi.lan/piroot  /lab/piroot cifs  username=USER,password=smbPassword,uid=1000,gid=1000,workgroup=workgroup 0 2\n</code></pre></p> </li> <li> <p> Mount newly added SMB mounts Bash<pre><code>sudo mount -a\n</code></pre></p> </li> </ul>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#screenshot","title":"Screenshot","text":"<ul> <li> Install <code>scrot</code> Bash<pre><code>paru -S scrot\n</code></pre></li> <li> Make <code>Pictures</code> directory Bash<pre><code>mkdir -pv ~/Pictures\n</code></pre></li> </ul>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#refind-bootloader","title":"rEFInd Bootloader","text":"","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#amd-ucode","title":"AMD Ucode","text":"<ul> <li> Install <code>amd-ucode</code> Bash<pre><code>paru -S amd-ucode\n</code></pre></li> <li> Add kernel and ucode to end of boot parameters</li> </ul> Bash<pre><code>initrd=\\initramfs-linux-zen.img #(1)\ninitrd=\\amd-ucode.img #(2)\n</code></pre> <ol> <li>Secify kernel initram from <code>/boot</code></li> <li>CPU Microcode from <code>/boot</code></li> </ol>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#kernel-parameters","title":"Kernel Parameters","text":"<ul> <li> Edit refind.conf with desired kernel parameter</li> </ul> sudoedit /boot/refind_linux.conf<pre><code>amdgpu.ppfeaturemask=0xfffd7fff #(1)\nipv6.disable=1 #(2)\n</code></pre> <ol> <li>Enable extra controls over GPU for overclocking</li> <li>Disables IPv6</li> </ol> <p>Tip</p> <p>Final <code>refind_linux.conf</code> for me look like Bash<pre><code>\"Boot with minimal options\"   \"ro root=PARTUUID=32768bfc-d092-224b-b36e-0b415dcf40c5 amdgpu.ppfeaturemask=0xfffd7fff ipv6.disable=1 initrd=\\initramfs-linux-zen.img initrd=\\amd-ucode.img\"\n</code></pre></p>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#theme","title":"Theme","text":"<ul> <li> CD into <code>Bench</code> directory Bash<pre><code>cd ~/Bench\n</code></pre></li> <li> Clone theme Bash<pre><code>git clone git@github.com:Hudater/rEFInd-glassy.git\n</code></pre></li> <li> Create directory for theme in <code>/boot</code> Bash<pre><code>sudo mkdir /boot/EFI/BOOT/themes\n</code></pre></li> <li> Copy theme to that directory Bash<pre><code>sudo cp -r rEFInd-glassy /boot/EFI/BOOT/themes\n</code></pre></li> <li> Change resolution and reference theme in <code>refind.conf</code> Bash<pre><code>sudo tee -a /boot/EFI/BOOT/refind.conf &gt; /dev/null &lt;&lt;EOT\nresolution 1920 1080\ninclude themes/rEFInd-glassy/theme.conf\nEOT\n</code></pre></li> </ul>","tags":["Linux","Setup","Desktop"]},{"location":"linux/desktop/#wireguard","title":"Wireguard","text":"<ul> <li> <p> Import a wireguard config using <code>nmcli</code> Bash<pre><code>nmcli connection import type wireguard file $SYNCFILES/configBak/wireguard/Zurich/pc.conf\n</code></pre></p> </li> <li> <p> Rename connection name from <code>pc</code> to <code>Zurich</code> Bash<pre><code>nmcli connection modify pc connection.id \"Zurich\"\n</code></pre></p> </li> <li> <p> Confirm that VPN connection is established Bash<pre><code>curl ifconfig.me\n</code></pre></p> </li> </ul>","tags":["Linux","Setup","Desktop"]},{"location":"linux/docker/","title":"Docker Setup on Linux","text":"<p>This page would define installation, uninstallation and user setup for Docker</p> <p>Info</p> <p>Run these using your standard user with sudo if required  </p>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#docker","title":"Docker","text":"","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#installation-and-uninstallation","title":"Installation and Uninstallation","text":"<p>Warning</p> <p>Best way would be to follow Official Docker Guide</p>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#docker-engine-and-compose-plugin","title":"Docker Engine and Compose Plugin","text":"ArchUbuntuDebian <ul> <li> <p> Install docker engine and compose Bash<pre><code>paru -S docker docker-compose --noconfirm\n</code></pre></p> </li> <li> <p> Add User to Docker group Bash<pre><code>sudo usermod -aG docker $USER\n</code></pre></p> </li> <li> <p> Enable and Run docker service Bash<pre><code>sudo systemctl enable --now docker.service\n</code></pre></p> </li> </ul> <p>Warning</p> <p>Log out and log back in to make sure everything works fine</p> <ul> <li> <p> Install pre-requisite packages Bash<pre><code>sudo apt-get update &amp;&amp;\\\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n</code></pre></p> </li> <li> <p> GPG Key Bash<pre><code>sudo mkdir -p /etc/apt/keyrings &amp;&amp;\\\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n</code></pre></p> </li> <li> <p> Add Repo URL to apt sources Bash<pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre></p> </li> <li> <p> Finally, Install docker engine Bash<pre><code>sudo apt-get update &amp;&amp;\\\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y\n</code></pre></p> </li> <li> <p> Add User to Docker group Bash<pre><code>sudo usermod -aG docker $USER\n</code></pre></p> </li> <li> <p> Enable and Run docker service Bash<pre><code>sudo systemctl enable --now docker.service\n</code></pre></p> </li> </ul> <p>Warning</p> <p>Log out and log back in to make sure everything works fine</p> <ul> <li> <p> Install pre-requisite packages Bash<pre><code>sudo apt-get update &amp;&amp;\\\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n</code></pre></p> </li> <li> <p> GPG Key Bash<pre><code>sudo mkdir -p /etc/apt/keyrings &amp;&amp;\\\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n</code></pre></p> </li> <li> <p> Add Repo URL to apt sources Bash<pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre></p> </li> <li> <p> Finally, Install docker engine Bash<pre><code>sudo apt-get update &amp;&amp;\\\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y\n</code></pre></p> </li> <li> <p> Add User to Docker group Bash<pre><code>sudo usermod -aG docker $USER\n</code></pre></p> </li> <li> <p> Enable and Run docker service Bash<pre><code>sudo systemctl enable --now docker.service\n</code></pre></p> </li> </ul> <p>Warning</p> <p>Log out and log back in to make sure everything works fine</p>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#uninstallation","title":"Uninstallation","text":"Bash<pre><code>paru -Rns docker docker-compose --noconfirm\n</code></pre>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#uninstallation_1","title":"Uninstallation","text":"Bash<pre><code>sudo apt-get remove docker docker-engine docker.io containerd runc\n</code></pre>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#uninstallation_2","title":"Uninstallation","text":"Bash<pre><code>sudo apt-get remove docker docker-engine docker.io containerd runc\n</code></pre>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#environment-variables","title":"Environment variables","text":"<p>Warning</p> <p>Official way of doing environment variables in docker-compose is via <code>.env file</code> This way makes it easier for me to backup env vars with compose files without exposing secrets</p> <ul> <li> <p> Create <code>.zshenv</code> file in your home directory and create environment variables with following format vim ~/.zshenv<pre><code>export \"CFG_DIR\"=\"/home/user/.config\"\nexport \"varName\"=\"varValue\"\n</code></pre></p> </li> <li> <p> Restart shell or source file Bash<pre><code>source ~/.zshenv\n</code></pre></p> </li> <li> <p> Test variables with echo Bash<pre><code>echo $CFG_DIR\n</code></pre></p> </li> </ul>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/docker/#docker-network","title":"Docker Network","text":"<ul> <li> Create custom docker network for all containers and Databases Bash<pre><code>docker network create proxy dbs\n</code></pre></li> </ul>","tags":["Linux","Setup","Server","Desktop","Installation"]},{"location":"linux/proxmox/","title":"Installation","text":"","tags":["PVE","Server","Virtualization"]},{"location":"linux/proxmox/#partition","title":"Partition","text":"","tags":["PVE","Server","Virtualization"]},{"location":"linux/proxmox/#basic-packages","title":"Basic packages","text":"Bash<pre><code>apt install bat curl exa ffmpeg git htop nano ncdu neofetch neovim pv rsync tldr traceroute tar vim wget\n</code></pre>","tags":["PVE","Server","Virtualization"]},{"location":"linux/proxmox/#dark-mode","title":"Dark Mode","text":"Bash<pre><code>https://github.com/Weilbyte/PVEDiscordDark\n</code></pre>","tags":["PVE","Server","Virtualization"]},{"location":"linux/proxmox/#repo","title":"Repo","text":"Bash<pre><code>https://docs.technotim.live/posts/first-11-things-proxmox/#updates\n</code></pre>","tags":["PVE","Server","Virtualization"]},{"location":"linux/server/","title":"Server Linux Setup","text":"<p>This page would define additional setup for Server instances</p> <p>Info</p> <p>Run these using your standard user with sudo if required  </p>","tags":["Linux","Setup","Server"]},{"location":"linux/server/#package-manager","title":"Package Manager","text":"","tags":["Linux","Setup","Server"]},{"location":"linux/server/#basic-setup","title":"Basic Setup","text":"Debian/UbuntuFedora <ul> <li> <p> Install Nala to replace apt: Official Nala Installation Guide</p> </li> <li> <p> Enable unattended-upgrades: PhoenixNap tutorial</p> </li> </ul> <ul> <li> <p> Edit dnf config Bash<pre><code>sudoedit /etc/dnf/dnf.conf\n</code></pre></p> </li> <li> <p> Change or add these options Bash<pre><code>fastestmirror=true\nmax_parallel_downloads=10\ndefaultyes=true\n</code></pre></p> </li> <li> <p> Enable fusion repos: Official Guide by Fedora</p> </li> </ul>","tags":["Linux","Setup","Server"]},{"location":"linux/server/#install-basic-packages","title":"Install basic packages","text":"Bash<pre><code>sudo nala install bat curl exa ffmpeg git htop linux-generic mergerfs nano ncdu neofetch neovim pv rsync samba stow tldr traceroute unzip tar vim wget youtube-dl zsh\n</code></pre>","tags":["Linux","Setup","Server"]},{"location":"linux/server/#samba","title":"Samba","text":"","tags":["Linux","Setup","Server"]},{"location":"linux/server/#create-directories","title":"Create directories","text":"Bash<pre><code>mkdir -pv /drives\n/drives/Media Seagate Nvme\nchown /drives /mnt\n</code></pre>","tags":["Linux","Setup","Server"]},{"location":"linux/server/#mergerfs","title":"Mergerfs","text":"","tags":["Linux","Setup","Server"]},{"location":"linux/server/#samba-setup","title":"Samba setup","text":"","tags":["Linux","Setup","Server"]},{"location":"linux/server/#kernel-parameters","title":"Kernel Parameters","text":"","tags":["Linux","Setup","Server"]},{"location":"linux/server/#grub-bootloader","title":"GRUB bootloader","text":"<ul> <li> TODO sudoedit /boot/fileToAdd.conf<pre><code>https://askubuntu.com/questions/19486/how-do-i-add-a-kernel-boot-parameter\n</code></pre></li> </ul>","tags":["Linux","Setup","Server"]},{"location":"management/olivetin/","title":"Olivetin","text":"","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#description","title":"Description","text":"<p>OliveTin gives safe and simple access to predefined shell commands from a web interface.</p>","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#bare-metal","title":"Bare Metal","text":"","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>olivetin</code></li> <li> Official Wiki: Official Olivetin Wiki</li> <li> Official Github: Official Github Repo</li> </ul>","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#configyaml","title":"config.yaml","text":"YAML<pre><code>---\n# There is a built-in micro proxy that will host the webui and REST API all on \n# one port (this is called the \"Single HTTP Frontend\") and means you just need \n# one open port in the container/firewalls/etc. \n#\n# Listen on all addresses available, port 1337\nlistenAddressSingleHTTPFrontend: 0.0.0.0:1337\n\n# Choose from INFO (default), WARN and DEBUG\nlogLevel: \"INFO\"\n\n# Actions (buttons) to show up on the WebUI:\nactions:\n\n- title: Restart Computers\n  icon: \"&amp;#10226;\"\n  shell: ssh \"{{ computers }}\" 'sudo reboot'\n  arguments:\n    - name: computers\n      choices:\n        - title: Acer\n          value: yourUserName@acer.lan\n\n        - title: Main PC\n          value: yourUserName@pc.lan\n\n        - title: Pi4\n          value: yourUserName@pi.lan\n\n        - title: Pi Zero\n          value: yourUserName@pero.lan\n\n- title: Poweroff Computers\n  icon: \"&amp;#9211;\"\n  shell: ssh \"{{ computers }}\" 'sudo poweroff'\n  arguments:\n    - name: computers\n      choices:\n        - title: Acer\n          value: yourUserName@acer.lan\n\n        - title: Main PC\n          value: yourUserName@pc.lan\n\n        - title: Pi4\n          value: yourUserName@pi.lan\n\n        - title: Pi Zero\n          value: yourUserName@pero.lan\n\n- title: Boot Computers\n  icon: \"&amp;#129406;\"\n  shell: wakeonlan \"{{ computers }}\"\n  arguments:\n    - name: computers\n      choices:\n        - title: Acer\n          value: fc:45:96:e7:cf:08\n\n        - title: Main PC\n          value: 18:c0:4d:39:0c:ff\n\n- title: Monitor Functions\n  icon: \"&amp;#128437;\"\n  shell: ssh yourUserName@pc.lan 'xset -display :0 dpms force \"{{ function }}\"'\n  arguments:\n    - name: function\n      choices:\n        - title: Turn Monitor On\n          value: \"on\"\n\n        - title: Turn Monitor Off\n          value: \"off\"\n\n- title: Restart AdGuard\n  shell: systemctl restart AdGuardHome.service\n  icon: \"&amp;#8962;\"\n  timeout: 5\n\n- title: Restart Olivetin\n  shell: systemctl restart OliveTin\n  icon: \"&amp;#129746;\"\n  timeout: 5\n</code></pre>","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#setup","title":"Setup","text":"","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#prerequisite","title":"Prerequisite","text":"","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#ssh-setup","title":"SSH setup","text":"<ul> <li> <p> Copy ssh directory to root user's home direrctory   Bash<pre><code>sudo cp -r /home/$USER/.ssh /root/.ssh\n</code></pre></p> </li> <li> <p> Switch to root user   Bash<pre><code>sudo su\n</code></pre></p> </li> <li> <p> Fix the permissions   Bash<pre><code>chmod 700 /root/.ssh\nchmod 600 /root/.ssh/authorized_keys\n</code></pre></p> </li> <li> <p> SSH into all the machines once   Copy paste from config.yaml<pre><code>ssh yourUserName@acer.lan\n</code></pre></p> </li> <li> <p> Make some commands passwordless with <code>sudo visudo</code> Paste before the last line<pre><code>ALL ALL=NOPASSWD: /sbin/poweroff,/sbin/reboot,/sbin/shutdown\n</code></pre></p> </li> </ul>","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#wake-on-lan","title":"Wake on LAN","text":"<p>Warning</p> <p>Ticked options are to be run on clients and unticked on server Refer to Arch Wiki for more information on WoL Arch Wiki for WoL</p> <ul> <li> <p> Install <code>wakeonlan</code> package   Bash<pre><code>sudo apt install wakeonlan -y\n</code></pre></p> </li> <li> <p> Enable wakeonlan function at firmware level on clients</p> </li> <li> <p> Find interface name   Here enp1s0 is primary NIC<pre><code>ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n  link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n  inet 127.0.0.1/8 scope host lo\n     valid_lft forever preferred_lft forever\n2: enp1s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether fc:55:55:55:55:55 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.29.11/24 metric 100 brd 192.168.29.255 scope global dynamic enp1s0\n      valid_lft 47171sec preferred_lft 47171sec\n</code></pre></p> </li> <li> <p> Create systemd-service for WoL   sudoedit /etc/systemd/system/wol@.service<pre><code>[Unit]\nDescription=Wake-on-LAN for %i\nRequires=network.target\nAfter=network.target\n\n[Service]\nExecStart=/usr/sbin/ethtool -s %i wol g\nType=oneshot\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> </li> <li> <p> Enable WoL service   Bash<pre><code>sudo systemctl enable wol@interface --now\n</code></pre></p> </li> <li> <p> Reboot twice</p> </li> <li> <p> Check WoL status   Wake-on: g means WoL is enabled<pre><code>sudo ethtool enp1s0 | grep Wake-on\n</code></pre></p> </li> </ul>","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/olivetin/#installation","title":"Installation","text":"<p>Warning</p> <p>For some reason, setup didn't go well when doing all this via root user so I'm running these as general user This guide is written with a <code>Pi-Zero</code> ,running <code>Raspbian</code>, in mind</p> <ul> <li> <p> Download relevant package from Github   Deb packge for Armv6<pre><code>wget -O OliveTin.deb https://github.com/OliveTin/OliveTin/releases/download/2022-04-07/OliveTin_2022-04-07_linux_armv6.deb\n</code></pre></p> </li> <li> <p> Make the pkg executable   Bash<pre><code>sudo chmod +x OliveTin.deb\n</code></pre></p> </li> <li> <p> Install the package:   Bash<pre><code>sudo dpkg -i OliveTin.\u200bdeb\n</code></pre></p> </li> <li> <p> Make a backup copy of default config   Bash<pre><code>sudo mv /etc/OliveTin/config.yaml /etc/OliveTin/BAK.config.yaml\n</code></pre></p> </li> <li> <p> Copy modified config file   Bash<pre><code>sudo cp /home/$USER/GitIt/SyncFiles/configBak/olivetin/config.yaml /etc/OliveTin/config.yaml\n</code></pre></p> </li> <li> <p> Start and enable OliveTin service   Bash<pre><code>sudo systemctl enable OliveTin.service --now\n</code></pre></p> </li> <li> <p> Check service status   Bash<pre><code>sudo systemctl status OliveTin.service\n</code></pre></p> </li> </ul> <p>Tip</p> <p>Mount <code>/etc/OliveTin</code> via ssh to edit config file Bash<pre><code>sshfs root@192.168.29.12:/etc/OliveTin Bench/OliveTin\n</code></pre></p>","tags":["Bare Metal","Management","Command Runner"]},{"location":"management/portainer-agent/","title":"Portainer-Agent","text":"","tags":["Docker","Management"]},{"location":"management/portainer-agent/#description","title":"Description","text":"<p>Portainer-agent provides an endpoint for Portainer-CE to connect to and manage your docker instance via GUI</p>","tags":["Docker","Management"]},{"location":"management/portainer-agent/#docker","title":"Docker","text":"","tags":["Docker","Management"]},{"location":"management/portainer-agent/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Port: <code>9001</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Portainer-agent Docs</li> </ul>","tags":["Docker","Management"]},{"location":"management/portainer-agent/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  portainer-agent:\n    image: portainer/agent:latest\n    container_name: port-agent\n    networks:\n      - proxy # rename this to your custom docker network \n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n    ports:\n      - 9001:9001\n    restart: unless-stopped\n    volumes:\n      - /var/lib/docker/volumes:/var/lib/docker/volumes\n      - /var/run/docker.sock:/var/run/docker.sock\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Management"]},{"location":"management/portainer-agent/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Management"]},{"location":"management/portainer-ce/","title":"Portainer-CE","text":"","tags":["Docker","Management"]},{"location":"management/portainer-ce/#description","title":"Description","text":"<p>Portainer provides an intuitive GUI to manage your docker instance</p>","tags":["Docker","Management"]},{"location":"management/portainer-ce/#docker","title":"Docker","text":"","tags":["Docker","Management"]},{"location":"management/portainer-ce/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>9000</code></li> <li> Other Ports: <code>8000</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Portainer-CE Docs</li> </ul>","tags":["Docker","Management"]},{"location":"management/portainer-ce/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3'\nservices:\n  portainer:\n    image: portainer/portainer-ce:latest\n    container_name: portainer\n    networks:\n      - proxy # rename this to your custom docker network\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n    ports:\n      - 8000:8000\n      - 9000:9000\n    volumes:\n      - portainer_data:/data\n      - /etc/localtime:/etc/localtime:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    labels:\n      traefik.enable: true\n      traefik.http.services.portainer.loadbalancer.server.port: 9000\n\nvolumes:\n  portainer_data:\n\nnetworks:\n  proxy:\n    external: true\n</code></pre>","tags":["Docker","Management"]},{"location":"management/portainer-ce/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Management"]},{"location":"management/vscode/","title":"VSCode","text":"","tags":["Docker","Management","Code"]},{"location":"management/vscode/#description","title":"Description","text":"<p>A web-based version of VS Code</p> <p>Todo</p> <p>Setup vscode</p>","tags":["Docker","Management","Code"]},{"location":"management/vscode/#docker","title":"Docker","text":"","tags":["Docker","Management","Code"]},{"location":"management/vscode/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Port: <code>80</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: docs.HAops.dev</li> </ul>","tags":["Docker","Management","Code"]},{"location":"management/vscode/#docker-composeyml","title":"docker-compose.yml","text":"YAML","tags":["Docker","Management","Code"]},{"location":"management/vscode/#deploysh","title":"deploy.sh","text":"Bash","tags":["Docker","Management","Code"]},{"location":"management/watchtower/","title":"Watchtower","text":"","tags":["Docker","Management"]},{"location":"management/watchtower/#description","title":"Description","text":"<p>Watchtower can auto-updates your docker containers, pull latest image, notify you of new image or updated container and some more</p>","tags":["Docker","Management"]},{"location":"management/watchtower/#docker","title":"Docker","text":"","tags":["Docker","Management"]},{"location":"management/watchtower/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Docs</li> </ul>","tags":["Docker","Management"]},{"location":"management/watchtower/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"3\"\nservices:\n  watchtower:\n    image: containrrr/watchtower:latest\n    container_name: watchtower\n    networks:\n      - proxy # rename this to your custom docker network\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /etc/localtime:/etc/localtime:ro\n    environment:\n      WATCHTOWER_CLEANUP: \"true\"\n      WATCHTOWER_INCLUDE_RESTARTING: \"true\"\n      WATCHTOWER_ROLLING_RESTART: \"true\"\n      WATCHTOWER_SCHEDULE: 0 0 3 * * * #at 3 AM everyday\n      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_URL}\n      WATCHTOWER_DEBUG: \"true\"\n      WATCHTOWER_POLL_INTERVAL: \"86400\"\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Management"]},{"location":"management/watchtower/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Management"]},{"location":"media/bazarr/","title":"Bazarr","text":"","tags":["Docker","Media"]},{"location":"media/bazarr/#description","title":"Description","text":"<p>Bazarr automatically downloads subtitles for your Movies and TV Shows by integrating with Sonarr</p> <p>Warning</p> <p>This guide utilises Hardlinks Refer to Trash's Guide for elaborate description</p> <p>Note</p> <p>For extended guide, refer to TRaSH-Guides</p>","tags":["Docker","Media"]},{"location":"media/bazarr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/bazarr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>6767</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Wiki</li> </ul>","tags":["Docker","Media"]},{"location":"media/bazarr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  bazarr:\n    image: linuxserver/bazarr:latest\n    container_name: bazarr\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr\n      - TP_THEME=organizr\n    volumes:\n      - ${CFG_DIR}/bazarr:/config\n      - ${BAK_CFG_DIR}/bazarr:/config/Backups\n      - ${DATA_DIR}/Media:/data/Media\n    ports:\n      - 6767:6767\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/bazarr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/bazarr\nmkdir -p \"${BAK_CFG_DIR}\"/bazarr\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/flaresolverr/","title":"Flaresolverr","text":"","tags":["Docker","Media"]},{"location":"media/flaresolverr/#description","title":"Description","text":"<p>FlareSolverr is a proxy server to bypass Cloudflare protection</p>","tags":["Docker","Media"]},{"location":"media/flaresolverr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/flaresolverr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Port: <code>8191</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Flaresolverr Docs on Servarr</li> </ul>","tags":["Docker","Media"]},{"location":"media/flaresolverr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  flaresolverr:\n    image: flaresolverr/flaresolverr:latest\n    container_name: flaresolverr\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - LOG_LEVEL=${LOG_LEVEL:-info}\n      - LOG_HTML=${LOG_HTML:-false}\n      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}\n      - TZ=${TZ}\n    ports:\n      - \"${PORT:-8191}:8191\"\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/flaresolverr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/jellyfin/","title":"Jellyfin","text":"","tags":["Docker","Media"]},{"location":"media/jellyfin/#description","title":"Description","text":"<p>Jellyfin is an open-source media server alternative to Plex</p> <p>Warning</p> <p>This guide utilises Hardlinks Refer to Trash's Guide for elaborate description</p>","tags":["Docker","Media"]},{"location":"media/jellyfin/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/jellyfin/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>8096</code></li> <li> Other Ports: <code>7359</code> <code>1900</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Jellyfin Docs</li> </ul>","tags":["Docker","Media"]},{"location":"media/jellyfin/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  jellyfin:\n    image: linuxserver/jellyfin:latest\n    container_name: jellyfin\n    networks:\n      - proxy # rename this to your custom docker network\n    group_add:\n      - 109 #adding group `render` so that VAAPI can use the almighrty radeon r5\n      #remeber to change the group id which is present in /etc/group\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - JELLYFIN_PublishedServerUrl=192.168.29.11 #optional\n    volumes:\n      - \"${CFG_DIR}/jellyfin:/config\"\n      - \"${DATA_DIR}:/data\"\n    ports:\n      - 8096:8096\n      - 7359:7359/udp #optional\n      - 1900:1900/udp #optional\n    devices:\n      - /dev/dri/renderD128:/dev/dri/renderD128 #optional\n      - /dev/dri/card0:/dev/dri/card0\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/jellyfin/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/jellyfin\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/jellyseerr/","title":"Jellyseerr","text":"","tags":["Docker","Media"]},{"location":"media/jellyseerr/#description","title":"Description","text":"<p>Media requester for Jellyfin and Emby. An overseerr alternative for Jellyfin and Emby users</p>","tags":["Docker","Media"]},{"location":"media/jellyseerr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/jellyseerr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>5055</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> </ul>","tags":["Docker","Media"]},{"location":"media/jellyseerr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3'\nservices:\n  jellyseerr:\n    image: fallenbagel/jellyseerr:latest\n    container_name: jellyseerr\n    environment:\n      - LOG_LEVEL=debug\n      - TZ=${TZ}\n    volumes:\n      - \"${CFG_DIR}/jellyseerr:/app/config\"\n      - \"${BAK_CFG_DIR}/jellyseerr/settings.json:/app/config/settings.json\"\n    ports:\n      - 5055:5055\n    networks:\n      - proxy\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/jellyseerr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/jellyseerr\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/prowlarr/","title":"Prowlarr","text":"","tags":["Docker","Media"]},{"location":"media/prowlarr/#description","title":"Description","text":"<p>Prowlarr is an indexer manager/proxy for *arrs, an alternative for Jackett</p> <p>Warning</p> <p>This guide utilises Hardlinks Refer to Trash's Guide for elaborate description</p>","tags":["Docker","Media"]},{"location":"media/prowlarr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/prowlarr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>9696</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Prowlarr Docs</li> </ul>","tags":["Docker","Media"]},{"location":"media/prowlarr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  prowlarr:\n    image: linuxserver/prowlarr:develop\n    container_name: prowlarr\n    networks:\n      - proxy # rename this to your custom docker network\n    # network_mode: \"container:gluetun\"\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr\n      - TP_THEME=organizr\n    volumes:\n      - \"${CFG_DIR}/prowlarr:/config\"\n      - \"${BAK_CFG_DIR}/prowlarr:/config/Backups\"\n    ports:\n      - 9696:9696\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/prowlarr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/prowlarr\nmkdir -p \"${BAK_CFG_DIR}\"/prowlarr\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/qbittorrent/","title":"qBittorrent","text":"","tags":["Docker","Media"]},{"location":"media/qbittorrent/#description","title":"Description","text":"<p>qBittorrent is an open-source BitTorrent Client This image comes with vue.js theme</p> <p>Warning</p> <p>This guide utilises Hardlinks Refer to Trash's Guide for elaborate description</p> <p>Note</p> <p>For extended guide, refer to TRaSH-Guides</p>","tags":["Docker","Media"]},{"location":"media/qbittorrent/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/qbittorrent/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>4000</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: qBittorrent Docs</li> </ul>","tags":["Docker","Media"]},{"location":"media/qbittorrent/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"3.7\"\nservices:\n  qbittorrent:\n    container_name: qbit\n    image: hotio/qbittorrent:latest\n    networks:\n      - proxy # rename this to your custom docker network\n    ports:\n      - \"4000:8080\"\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - UMASK=002\n      - TZ=${TZ}\n    volumes:\n      - \"${CFG_DIR}/qbittorrent:/config\"\n      - \"${DATA_DIR}/Torrents:/data/Torrents\"\n      - \"${DATA_DIR}/Del:/Del\"\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/qbittorrent/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/qbittorrent\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/qbittorrent/#settings","title":"Settings","text":"Path settings line-by-line<pre><code>/data/Torrents/complete\n/data/Torrents/downloading\n/data/Torrents/torfiles/bak/added\n/data/Torrents/torfiles/bak/complete\n/data/Torrents/torfiles\n</code></pre>","tags":["Docker","Media"]},{"location":"media/radarr/","title":"Radarr","text":"","tags":["Docker","Media"]},{"location":"media/radarr/#description","title":"Description","text":"<p>Radarr is a movie collection manager for Usenet and BitTorrent users It basically automatically downloads, renames and manages your movies while respecting your custom settings</p> <p>Warning</p> <p>This guide utilises Hardlinks Refer to Trash's Guide for elaborate description</p> <p>Note</p> <p>For extended guide, refer to TRaSH-Guides</p>","tags":["Docker","Media"]},{"location":"media/radarr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/radarr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>7878</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Radarr Docs</li> </ul>","tags":["Docker","Media"]},{"location":"media/radarr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  radarr:\n    image: linuxserver/radarr:latest\n    container_name: radarr\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr\n      - TP_THEME=organizr\n    volumes:\n      - ${CFG_DIR}/radarr:/config\n      - ${BAK_CFG_DIR}/radarr:/config/Backups\n      - ${DATA_DIR}:/data\n    ports:\n      - 7878:7878\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/radarr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/radarr\nmkdir -p \"${BAK_CFG_DIR}\"/radarr\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/requestrr/","title":"Requestrr","text":"","tags":["Docker","Media"]},{"location":"media/requestrr/#description","title":"Description","text":"<p>Requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat</p>","tags":["Docker","Media"]},{"location":"media/requestrr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/requestrr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>4545</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Requestrr Docs</li> </ul>","tags":["Docker","Media"]},{"location":"media/requestrr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  requestrr:\n    image: linuxserver/requestrr:latest\n    container_name: requestrr\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n    volumes:\n      - \"${CFG_DIR}/requestrr:/config\"\n      - \"${BAK_CFG_DIR}/requestrr/settings.json:/config/settings.json\"\n      - \"${BAK_CFG_DIR}/requestrr/notifications.json:/config/notifications.json\"\n    ports:\n      - 4545:4545\n    networks:\n      - proxy\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/requestrr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/requestrr\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"media/sonarr/","title":"Sonarr","text":"","tags":["Docker","Media"]},{"location":"media/sonarr/#description","title":"Description","text":"<p>Sonarr is a TV Show collection manager for Usenet and BitTorrent users It basically automatically downloads, renames and manages your TV Shows while respecting your custom settings</p> <p>Warning</p> <p>This guide utilises Hardlinks Refer to Trash's Guide for elaborate description</p> <p>Note</p> <p>For extended guide, refer to TRaSH-Guides</p>","tags":["Docker","Media"]},{"location":"media/sonarr/#docker","title":"Docker","text":"","tags":["Docker","Media"]},{"location":"media/sonarr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>8989</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Sonarr Docs</li> </ul>","tags":["Docker","Media"]},{"location":"media/sonarr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  sonarr:\n    image: linuxserver/sonarr:latest\n    container_name: sonarr\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr\n      - TP_THEME=organizr\n    volumes:\n      - ${CFG_DIR}/sonarr:/config\n      - ${BAK_CFG_DIR}/sonarr:/config/Backups\n      - ${DATA_DIR}:/data\n    ports:\n      - 8989:8989\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Media"]},{"location":"media/sonarr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/sonarr\nmkdir -p \"${BAK_CFG_DIR}\"/sonarr\ndocker compose up -d\n</code></pre>","tags":["Docker","Media"]},{"location":"monitoring/dozzle/","title":"Dozzle","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/dozzle/#description","title":"Description","text":"<p>Realtime log viewer for docker containers meant for debugging</p>","tags":["Docker","Monitoring"]},{"location":"monitoring/dozzle/#docker","title":"Docker","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/dozzle/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>9999</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Dozzle Wiki</li> </ul>","tags":["Docker","Monitoring"]},{"location":"monitoring/dozzle/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"3\"\nservices:\n  dozzle:\n    container_name: dozzle\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 9999:8080\n    labels:\n      traefik.enable: true\n    networks:\n      - proxy\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/dozzle/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/heimdall/","title":"Heimdall","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/heimdall/#description","title":"Description","text":"<p>Heimdall is a way to organise all those links to your most used web sites and web applications in a simple way</p>","tags":["Docker","Monitoring"]},{"location":"monitoring/heimdall/#docker","title":"Docker","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/heimdall/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>82</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Heimdall Wiki</li> </ul>","tags":["Docker","Monitoring"]},{"location":"monitoring/heimdall/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  heimdall:\n    image: linuxserver/heimdall:latest\n    container_name: heimdall\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n    volumes:\n      - \"${CFG_DIR}/heimdall:/config\"\n    ports:\n      - 82:80\n    labels:\n      traefik.enable: true\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/heimdall/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/heimdall\ndocker-compose up -d\n\n# increase the max upload size in php-local.ini file:\n# the command below invokes a bash shell and then echoes the line to the end of the file)\necho \"Sleeping 5 seconds\"\nsleep 5\ndocker exec -it heimdall bash -c \"echo upload_max_filesize = 30M &gt;&gt; /config/php/php-local.ini\"\ndocker restart heimdall\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/homarr/","title":"Homarr","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/homarr/#description","title":"Description","text":"<p>Customizable browser's home page with *arr integration</p>","tags":["Docker","Monitoring"]},{"location":"monitoring/homarr/#docker","title":"Docker","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/homarr/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>7575</code></li> <li> Image: Github Container Repo</li> <li> Repo: Github</li> <li> Website: Official Homarr Wiki</li> </ul>","tags":["Docker","Monitoring"]},{"location":"monitoring/homarr/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3'\nservices:\n  homarr:\n    container_name: homarr\n    image: ghcr.io/ajnart/homarr:latest\n    restart: unless-stopped\n    volumes:\n      - \"${BAK_CFG_DIR}/homarr:/app/data/configs\"\n    ports:\n      - '7575:7575'\n    networks:\n      - proxy\n    labels:\n      traefik.enable: true\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/homarr/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir ${BAK_CFG_DIR}/homarr\ndocker compose up -d\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/homer/","title":"Homer","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/homer/#description","title":"Description","text":"<p>A dead simple static HOMepage for your servER to keep your services on hand, from a simple yaml configuration file</p> <p>Warning</p> <p>I'm using a custom theme by WalkxCode. If you wish not to use it, remove respective section in deploy.sh file</p>","tags":["Docker","Monitoring"]},{"location":"monitoring/homer/#docker","title":"Docker","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/homer/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>888</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Homer Wiki</li> <li> Theme: Theme by WalkxCode</li> <li> Theme Customization: On Github</li> </ul>","tags":["Docker","Monitoring"]},{"location":"monitoring/homer/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"3\"\nservices:\n  homer:\n    image: b4bz/homer:latest\n    container_name: homer\n    networks:\n      - proxy\n    labels:\n      traefik.enable: true   # Enable Traefik reverse proxy for the Traefik dashboard.\n    volumes:\n      - /home/$USER/.config/homer:/www/assets\n      - \"${BAK_CFG_DIR}/homer/config.yml:/www/assets/config.yml\"\n      - \"${BAK_CFG_DIR}/icons:/www/assets/manicons\"\n      - \"${BAK_CFG_DIR}/wallpapers:/www/assets/wallpapers\"\n    ports:\n      - 888:8080\n    environment:\n      - UID=${PUID}\n      - GID=${PGID}\n      - TZ=${TZ}\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/homer/#deploysh","title":"deploy.sh","text":"Bash<pre><code>#!/bin/sh\n# Creating directories to hold config files etc\nmkdir -p /home/$USER/.config/homer\ntouch \"${BAK_CFG_DIR}\"/homer/config.yml\nmkdir -p \"${BAK_CFG_DIR}\"/homer/manicons\n# deploying container\ndocker compose up -d\n\n# DON'T DO THIS IF YOU DON'T WANT CUSTOM THEME\n# cloning custom theme for homer\ngit clone https://github.com/WalkxCode/Homer-Theme.git /home/$USER/Homer-Theme\nsudo chmod -R 777 /home/$USER/Homer-Theme\n\n# deleting default config.\nsudo chmod -R 777 /home/$USER/.config/homer\nfind /home/$USER/.config/homer/* ! -name 'manicons' ! -name 'wallpapers' ! -name 'config.yml' -type d,f -exec rm -rf \"{}\" +\n\n# moving custom theme files to homer dir\nmv /home/$USER/Homer-Theme/assets/config.yml /home/$USER/Homer-Theme/assets/og-config.yml\nmv /home/$USER/Homer-Theme/assets/* /home/$USER/.config/homer/\n\n# removing the custom theme git dir\nrm -rf /home/$USER/Homer-Theme\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/scrutiny/","title":"Scrutiny","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/scrutiny/#description","title":"Description","text":"<p>Hard Drive S.M.A.R.T Monitoring, Historical Trends &amp; Real World Failure Thresholds</p>","tags":["Docker","Monitoring"]},{"location":"monitoring/scrutiny/#docker","title":"Docker","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/scrutiny/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>8780</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Scrutiny Wiki</li> </ul>","tags":["Docker","Monitoring"]},{"location":"monitoring/scrutiny/#docker-composeyml","title":"docker compose.yml","text":"AcerPCPi4 YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  scruacer:\n    image: linuxserver/scrutiny:version-8e34ef8d\n    container_name: scruacer\n    networks:\n      - proxy # rename this to your custom docker network\n    cap_add:\n      - SYS_RAWIO\n      - SYS_ADMIN #optional\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - SCRUTINY_API_ENDPOINT=http://localhost:8080\n      - SCRUTINY_WEB=true\n      - SCRUTINY_COLLECTOR=true\n    volumes:\n      - \"${BAK_CFG_DIR}/scrutiny/scrutiny.yaml:/config/scrutiny.yaml\"\n      - \"${CFG_DIR}/scrutiny:/config\"\n      - /run/udev:/run/udev:ro\n    ports:\n      - 8780:8080\n    devices:\n      - /dev/sda:/dev/sda\n      - /dev/sdb:/dev/sdb\n      - /dev/sdc:/dev/sdc\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  scrumain:\n    image: linuxserver/scrutiny:latest\n    container_name: scrumain\n    networks:\n      - proxy # rename this to your custom docker network\n    cap_add:\n      - SYS_RAWIO\n      - SYS_ADMIN #optional\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - SCRUTINY_API_ENDPOINT=http://localhost:8080\n      - SCRUTINY_WEB=true\n      - SCRUTINY_COLLECTOR=true\n    volumes:\n      - \"${BAK_CFG_DIR}/scrutiny/scrutiny.yaml:/config/scrutiny.yaml\"\n      - \"${CFG_DIR}/scrutiny:/config\"\n      - /run/udev:/run/udev:ro\n    ports:\n      - 8780:8080\n    devices:\n      - /dev/nvme0:/dev/nvme0\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  scrupi:\n    image: linuxserver/scrutiny:version-8e34ef8d\n    container_name: scrupi\n    networks:\n      - proxy # rename this to your custom docker network\n    cap_add:\n      - SYS_RAWIO\n      - SYS_ADMIN #optional\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - SCRUTINY_API_ENDPOINT=http://localhost:8080\n      - SCRUTINY_WEB=true\n      - SCRUTINY_COLLECTOR=true\n    labels:\n      traefik.enable: true\n    volumes:\n      - \"${BAK_CFG_DIR}/scrutiny/scrutiny.yaml:/config/scrutiny.yaml\"\n      - \"${CFG_DIR}/scrutiny:/config\"\n      - /run/udev:/run/udev:ro\n    ports:\n      - 8780:8080\n    devices:\n      - /dev/sda:/dev/sda\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/scrutiny/#deploysh","title":"deploy.sh","text":"AcerPCPi4 Bash<pre><code>mkdir -p \"${CFG_DIR}\"/scrutiny\ndocker compose up -d\necho \"Sleeping for 5 seconds\"\nsleep 5\ndocker exec -it scruacer scrutiny-collector-metrics run\n</code></pre> Bash<pre><code>mkdir -p \"${CFG_DIR}\"/scrutiny\ndocker compose up -d\necho \"Sleeping for 5 seconds\"\nsleep 5\ndocker exec -it scrumain scrutiny-collector-metrics run\n</code></pre> Bash<pre><code>mkdir -p \"${CFG_DIR}\"/scrutiny\ndocker compose up -d\necho \"Sleeping for 5 seconds\"\nsleep 5\ndocker exec -it scrupi scrutiny-collector-metrics run\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/uptime-kuma/","title":"Uptime Kuma","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/uptime-kuma/#description","title":"Description","text":"<p>A fancy self-hosted monitoring tool with various services for alerts</p>","tags":["Docker","Monitoring"]},{"location":"monitoring/uptime-kuma/#docker","title":"Docker","text":"","tags":["Docker","Monitoring"]},{"location":"monitoring/uptime-kuma/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>3001</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Uptime-Kuma Wiki</li> </ul>","tags":["Docker","Monitoring"]},{"location":"monitoring/uptime-kuma/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3.3'\nservices:\n  uptime:\n    image: louislam/uptime-kuma:latest\n    container_name: uptime\n    networks:\n      - proxy # rename this to your custom docker network\n    labels:\n      traefik.enable: true\n    volumes:\n      - \"${CFG_DIR}/uptime:/app/data\"\n    ports:\n      - 3001:3001\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"monitoring/uptime-kuma/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/uptime\ndocker compose up -d\n</code></pre>","tags":["Docker","Monitoring"]},{"location":"networking/adguard/","title":"Adguard","text":"","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#description","title":"Description","text":"<p>DNS Server with Ad-blocking just like Pi-hole</p> <p>Warning</p> <p>Modify <code>dhcpcd.conf</code> AFTER adguard installation</p> sudoedit /etc/dhcpcd.conf<pre><code>static domain_name_servers=192.168.29.12 #(1)\n</code></pre> <ol> <li>Put it at the end of the file Change IP to LAN IP of Adguard server</li> </ol>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#global-settings-for-adguard","title":"Global Settings for Adguard","text":"<p>Note</p> <p>This section features scripts and settings to be used regardless the installation method</p>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#post-installation-configuration","title":"Post Installation Configuration","text":"<ul> <li> <p> DNS Settings</p> <ul> <li> Set upstream DNS   Text Only<pre><code>https://dns10.quad9.net/dns-query\ntls://1dot1dot1dot1.cloudflare-dns.com\nhttps://cloudflare-dns.com/dns-query\ntls://dns-unfiltered.adguard.com\nhttps://dns-unfiltered.adguard.com/dns-query\n1.1.1.1\n8.8.8.8\n</code></pre></li> <li> Set resolution method to <code>Parallel Requests</code></li> <li> Test upstream and Apply</li> </ul> </li> <li> <p> Allowlist</p> <ul> <li> Create an allowlist like one here and push it to a public repo</li> <li> Add link to raw version inside <code>Filters/DNS_Allowlists</code> Text Only<pre><code>https://raw.githubusercontent.com/Hudater/services/main/baremetal/adguard/allowlist.txt\n</code></pre></li> </ul> </li> <li> <p> Blocklist</p> <ul> <li> Change IP address, username and password in script</li> <li> Install dependency for the script Bash<pre><code>pip install requests\n</code></pre></li> <li> Run the script Bash<pre><code>python batch_adlist.py\n</code></pre></li> </ul> </li> </ul>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#allowlist","title":"Allowlist","text":"allowlist.txt<pre><code>||s.youtube.com/^\n||ravenminer.com^\n||stratum.ravenminer.com^\n||whattomine.com/^\n||xmrig.com/^\n||hiveos.farm/^\n||download.hiveos.farm/^\n||mega.nz/^\n||mega.io^\n||blog.jdpfu.com/^\n||jdownloader.org/^\n||rarbg.com/^\n||1337x.to^\n||1337xx.to/^\n||1337xxx.to/^\n||1377x.to/^\n||1377xx.to/^\n||1377xxx.to/^\n||1377x.is/^\n||tpb23.ukpass.co/^\n||torlock2.com/^\n||kickasstorrent.cr/^\n||movietorrent.co/^\n||badasstorrents.com/^\n||bitsearch.to/^\n||btdig.com/^\n||glodls.to/^\n||kickasstorrents.to/^\n||kickass.ws/^\n||movietorrent.co/^\n||thepiratebay.org/^\n||solidtorrents.to/^\n||www.torlock.com/^\n||torrent.by/^\n||torrents-csv.ml/^\n||2torrentz2eu.in/^\n||yourbittorrent.com/^\n||zooqle.com/^\n</code></pre>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#batch-blocklist-script","title":"Batch Blocklist Script","text":"<p>Todo</p> <p>Look into letsblockit</p> batch_adlist.py<pre><code>## credit: https://www.reddit.com/user/carzian/\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.poolmanager import PoolManager\nimport ssl\nimport requests\nimport json\n\n## DEPENDENCY:\n# pip install requests\n\n## CHANGE HERE ##\n# ip address of AdGuard Home\n# \"http(s)://&lt;adguardHomeIp:&lt;port&gt;\"\n# host = \"http://your.instance.ip.address:port\"\nhost = \"http://192.168.29.12:80\"\n# user name\nuserName = \"USERNAME_HERE\"\n# password\npassword = \"PASSWORD_HERE\"\n\n# block list\n# taken from Wally3K's Firebog https://firebog.net/\nurls = [\n\"https://raw.githubusercontent.com/PolishFiltersTeam/KADhosts/master/KADhosts.txt\"\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\"\n\"https://v.firebog.net/hosts/static/w3kbl.txt\"\n\"https://adaway.org/hosts.txt\"\n\"https://v.firebog.net/hosts/AdguardDNS.txt\"\n\"https://v.firebog.net/hosts/Admiral.txt\"\n\"https://raw.githubusercontent.com/anudeepND/blacklist/master/adservers.txt\"\n\"https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt\"\n\"https://v.firebog.net/hosts/Easylist.txt\"\n\"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&amp;showintro=0&amp;mimetype=plaintext\"\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\"\n\"https://raw.githubusercontent.com/bigdargon/hostsVN/master/hosts\"\n\"https://v.firebog.net/hosts/Easyprivacy.txt\"\n\"https://v.firebog.net/hosts/Prigent-Ads.txt\"\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\"\n\"https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt\"\n\"https://hostfiles.frogeye.fr/firstparty-trackers-hosts.txt\"\n\"https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt\"\n\"https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt\"\n\"https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt\"\n\"https://v.firebog.net/hosts/Prigent-Crypto.txt\"\n\"https://bitbucket.org/ethanr/dns-blacklists/raw/8575c9f96e5b4a1308f2f12394abd86d0927a4a0/bad_lists/Mandiant_APT1_Report_Appendix_D.txt\"\n\"https://phishing.army/download/phishing_army_blocklist_extended.txt\"\n\"https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-malware.txt\"\n\"https://raw.githubusercontent.com/Spam404/lists/master/main-blacklist.txt\"\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\"\n\"https://urlhaus.abuse.ch/downloads/hostfile/\"\n\"https://zerodot1.gitlab.io/CoinBlockerLists/hosts_browser\"\n\"https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt\"\n\"https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareAdGuardHome.txt\"\n\"https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/hosts.txt\"\n\"https://raw.githubusercontent.com/durablenapkin/scamblocklist/master/adguard.txt\"\n\"https://raw.githubusercontent.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites/master/hosts\"\n\"https://curben.gitlab.io/malware-filter/urlhaus-filter-agh-online.txt\"\n\"https://raw.githubusercontent.com/Perflyst/PiHoleBlocklist/master/SmartTV-AGH.txt\"\n\"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=adblockplus&amp;showintro=1&amp;mimetype=plaintext\"\n\"https://v.firebog.net/hosts/AdguardDNS.txt\",\n\"https://raw.githubusercontent.com/PolishFiltersTeam/KADhosts/master/KADhosts.txt\",\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\",\n\"https://v.firebog.net/hosts/static/w3kbl.txt\",\n\"https://v.firebog.net/hosts/AdguardDNS.txt\",\n\"https://v.firebog.net/hosts/Admiral.txt\",\n\"https://raw.githubusercontent.com/anudeepND/blacklist/master/adservers.txt\",\n\"https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt\",\n\"https://v.firebog.net/hosts/Easylist.txt\",\n\"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&amp;showintro=0&amp;mimetype=plaintext\",\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\",\n\"https://raw.githubusercontent.com/bigdargon/hostsVN/master/hosts\",\n\"https://v.firebog.net/hosts/Easyprivacy.txt\",\n\"https://v.firebog.net/hosts/Prigent-Ads.txt\",\n\"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\",\n\"https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt\",\n\"https://hostfiles.frogeye.fr/firstparty-trackers-hosts.txt\",\n\"https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt\",\n\"https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt\",\n\"https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt\",\n\"https://v.firebog.net/hosts/Prigent-Crypto.txt\",\n\"https://bitbucket.org/ethanr/dns-blacklists/raw/8575c9f96e5b4a1308f2f12394abd86d0927a4a0/bad_lists/Mandiant_APT1_Report_Appendix_D.txt\",\n\"https://phishing.army/download/phishing_army_blocklist_extended.txt\",\n\"https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-malware.txt\",\n\"https://raw.githubusercontent.com/Spam404/lists/master/main-blacklist.txt\",\n\"https://urlhaus.abuse.ch/downloads/hostfile/\",\n\"https://zerodot1.gitlab.io/CoinBlockerLists/hosts_browser\",\n\"https://abl.arapurayil.com/filters/main.txt\",\n\"https://abl.arapurayil.com/filters/nsfw.txt\",\n\"https://www.fanboy.co.nz/fanboy-indian.txt\",\n\"https://raw.githubusercontent.com/chadmayfield/my-pihole-blocklists/master/lists/pi_blocklist_porn_top1m.list\"\n]\nallow_urls = []\n\n############ End Edits #################\n\n# Open TLSv1 Adapter\nclass MyAdapter(HTTPAdapter):\n    def init_poolmanager(self, connections, maxsize, block=False):\n        self.poolmanager = PoolManager(num_pools=connections,\n                                       maxsize=maxsize,\n                                       block=block,\n                                       ssl_version=ssl.PROTOCOL_TLSv1)\n\nheaders = \"{'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0'}\"     \n\ns = requests.Session()\ns.mount(host, MyAdapter())\nx = s.post(host + \"/control/login\", json.dumps(\"{\"name\": userName, \"password\" : password}\"), headers=headers )\nprint(x.text)\n\nfor u in urls:\n    filterObj = json.dumps(\"{'url':u, \"name\":u,\"whitelist\":False}\")\n    print(filterObj)\n    x = s.post(host + \"/control/filtering/add_url\", data = filterObj, headers=headers)\n    print(x.text)\n\n# help from\n# https://stackoverflow.com/questions/30946370/using-requests-to-login-to-a-website-that-has-javascript-login-form\n# https://stackoverflow.com/questions/33818206/python-login-into-a-website-with-javascript-form\n</code></pre>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#bare-metal","title":"Bare Metal","text":"","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>adguard</code></li> <li> Other packages: <code>wget</code> <code>tar</code></li> <li> Repo: Github</li> <li> Website: Official Adguard Wiki</li> </ul>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#getting-started","title":"Getting started","text":"<p>Note</p> <p>These scripts are written by me and tested only on my personal environment Use at your own risk</p>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#installation-script","title":"Installation script","text":"installation.sh<pre><code>#!/bin/sh\n#checking if adguard dir exists in .config\nif [ -d \"/home/$USER/.config/adguard\" ]; then\n  echo \"Moving /home/$USER/.config/adguard to /home/$USER/.config/adguard-BAK\\n\"\n  mv /home/$USER/.config/adguard /home/$USER/.config/adguard-BAK\nfi\n\n#checking if tar is installed\n\nif ! command -v tar &gt;/dev/null 2&gt;&amp;1\nthen\n  echo &gt;&amp;2 \"tar is not installed. Enter Y to install tar or Q to quit\"\n  read doit\n    case $doit in\n      y|Y)\n        # finding os name\n        # https://stackoverflow.com/a/39959192\n        distro=$(awk -F'=' '/^ID=/ {print tolower($2)}' /etc/*-release 2&gt; /dev/null)\n        # echo $distro\n\n          # finding distribuition name and assigning package manager based on it\n          case $distro in\n            ubuntu | raspbian | debian)\n              package_manager=\"sudo apt-get install -y\"\n              echo $package_manager\n              ;;\n\n            arch | manjaro)\n              package_manager=\"sudo pacman -S --noconfirm\"\n              echo $package_manager\n              ;;\n\n            alpine)\n              package_manager=\"sudo apk --update add\"\n              echo $package_manager\n              ;;\n\n            centos)\n              package_manager=\"sudo yum install -y\"\n              echo $package_manager\n              ;;\n\n            fedora)\n              package_manager=\"sudo dnf install -y\"\n              echo $package_manager\n              ;;\n\n            *)\n              echo \"Can't find distro name. Exiting installer\"\n              exit 0\n              ;;\n          esac\n\n        # installing tar via $package_manager\n        ${package_manager} tar\n        # note: you can use this 2 var method to install multiple packages\n        # package=\"tar\"\n        # ${package_manager} ${package}\n        ;;\n\n      q|Q)\n        echo \"qutting\"; exit 0\n        ;;\n\n      *)\n        echo \"Invalid Option\"; exit 1\n        ;;\n    esac\nfi\n\n\n# echo \"Finding out cpu architecture and downloading relevant package\"\n\ncpuArch=$(uname -m)\n# echo \"$cpuArch\"\n\n# assigning wget with options and url to var\nmkdir /home/$USER/.config/adguard\ndownloader=\"wget --no-check-certificate --content-disposition -P /home/$USER/.config/adguard/ https://github.com/AdguardTeam/AdGuardHome/releases/latest/download/\"\n\n# downloading relevant package based on architecture\n# https://gist.github.com/jwebcat/5122366\ncase $cpuArch in\n  x86_64)\n    ${downloader}AdGuardHome_linux_amd64.tar.gz\n    ;;\n\n  aarch64 | arm64 | armv8)\n    ${downloader}AdGuardHome_linux_arm64.tar.gz\n    ;;\n\n  armv7)\n    ${downloader}AdGuardHome_linux_armv7.tar.gz\n    ;;\n\n  armv6l | armv6)\n    ${downloader}AdGuardHome_linux_armv6.tar.gz\n    ;;\nesac\n\n# extracting tarball\ntar -C /home/$USER/.config/adguard -zxvf /home/$USER/.config/adguard/AdGuardHome*\n\necho \"\\nInstalling Adguard\\n\"\nsudo /home/$USER/.config/adguard/AdGuardHome/AdGuardHome -s install\nunset doit distro package_manager cpuArch\n</code></pre>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#uninstallation-script","title":"Uninstallation script","text":"uninstall.sh<pre><code>#!/bin/sh\necho \"Uninstalling Adguard if installed via my script\\n\"\nsudo /home/$USER/.config/adguard/AdGuardHome/AdGuardHome -s uninstall\n\necho \"Enter M to move ~/.config/adguard to adgaurd-backup or D to delete the directory\"\nread userInput\ncase $userInput in\n  M|m)\n    echo \"Moving adguard to adgaurd-backup\"\n    mv /home/$USER/.config/adguard /home/$USER/.config/adguard-backup\n    unset userInput\n    exit 0;\n    ;;\n\n  D|d)\n    echo \"Removing Adguard dir from .config\"\n    sudo rm -rf /home/$USER/.config/adguard\n    unset userInput\n    exit 0;\n    ;;\n\n  *)\n    echo \"Invalid input. Exiting with code 1\"\n    unset userInput\n    exit 1;\n    ;;\nesac\n</code></pre>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#docker","title":"Docker","text":"","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#basic-info_1","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>80</code></li> <li> Other Ports: <code>53</code> <code>67</code> <code>68</code> <code>443</code> <code>3000</code> <code>853</code> <code>784</code> <code>8853</code> <code>5443</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Adguard Wiki</li> </ul>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3.3'\nservices:\n  adguard-home:\n    image: adguard/adguardhome:latest\n    container_name: adguard\n    networks:\n      - proxy # rename this to your custom docker network\n    restart: unless-stopped\n    volumes:\n      - \"${CFG_DIR}/adguard/work:/opt/adguardhome/work\"\n      - \"${CFG_DIR}/adguard/conf:/opt/adguardhome/conf\"\n    ports:\n      - 192.168.29.12:53:53/tcp\n      - 192.168.29.12:53:53/udp\n      - 67:67/udp\n      - 68:68/udp\n      - 80:80/tcp\n      - 443:443/tcp\n      - 443:443/udp\n      - 3000:3000/tcp\n      - 853:853/tcp\n      - 784:784/udp\n      - 853:853/udp\n      - 8853:8853/udp\n      - 5443:5443/tcp\n      - 5443:5443/udp\n    cap_add:\n      - NET_ADMIN\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Bare Metal","Networking"]},{"location":"networking/adguard/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p $CFG_DIR/adguard/{work,conf}\ndocker compose up -d\n</code></pre>","tags":["Bare Metal","Networking"]},{"location":"networking/authelia/","title":"Authelia","text":"","tags":["Docker","Networking"]},{"location":"networking/authelia/#description","title":"Description","text":"<p>Authelia is an open-source authentication and authorization server. I run it alongside Traefik to achieve Single Sign On for all my services</p> <p>Todo</p> <p>This service utilises database. More about databases will be added later</p>","tags":["Docker","Networking"]},{"location":"networking/authelia/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/authelia/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Port: <code>9091</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/authelia/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3'\nservices:\n  authelia:\n    image: authelia/authelia:latest\n    container_name: authelia\n    volumes:\n      - \"${BAK_CFG_DIR}/authelia/:/config\"\n    networks:\n      - proxy\n    labels:\n      traefik.enable: true\n      traefik.http.routers.authelia.entrypoints: https\n    expose:\n      - 9091\n    restart: unless-stopped\n    environment:\n      - TZ=${TZ}\n    healthcheck:\n      disable: true\n    depends_on:\n      - redis_authelia\n      - mariadb_authelia\n\n## Database section\n  redis_authelia:\n    container_name: redis_authelia\n    image: redis:latest\n    command: &gt;\n          --requirepass \"${REDIS_AUTHELIA_PASS}\"\n    expose:\n      - 6379\n    volumes:\n      - \"${DB_CFG_DIR}/redis_authelia:/data/\"\n    environment:\n      ALLOW_EMPTY_PASSWORD: \"no\"\n      REDIS_PASSWORD: \"${REDIS_AUTHELIA_PASS}\"\n    networks:\n      - proxy\n      - dbs\n    restart: unless-stopped\n\n  mariadb_authelia:\n    container_name: mariadb_authelia\n    image: linuxserver/mariadb:latest\n    expose:\n      - 3306\n    volumes:\n      - \"${DB_CFG_DIR}/mariadb_authelia:/config\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"${MYSQL_AUTHELIA_ROOT_PASS}\"\n      MYSQL_ROOT_USER: root\n      MYSQL_DATABASE: authelia\n      MYSQL_USER: authelia\n      MYSQL_PASSWORD: \"${MYSQL_AUTHELIA_USER_PASS}\"\n    networks:\n      - proxy\n      - dbs\n    restart: unless-stopped\n\nnetworks:\n  proxy:\n    external: true\n  dbs:\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/authelia/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/authelia\nsudo chmod -R 777 \"${BAK_CFG_DIR}\"/authelia/\nmkdir -p \"${DB_CFG_DIR}\"/redis_authelia\nmkdir -p \"${DB_CFG_DIR}\"/mariadb_authelia\ndocker compose up -d\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/authelia/#configuration","title":"Configuration","text":"<p>There are two config files you need for authelia: configuration.yml and users_database.yml</p>","tags":["Docker","Networking"]},{"location":"networking/authelia/#configurationyml","title":"configuration.yml","text":"YAML<pre><code>---\n## Use this website to generate secrets (256 bit minimum)\n## https://www.allkeysgenerator.com/Random/Security-Encryption-Key-Generator.aspx\n\nserver:\n  host: 0.0.0.0\n  port: 9091\n\nlog:\n  level: debug\n\ntheme: dark\n\n# This secret can also be set using the env variables AUTHELIA_JWT_SECRET_FILE\njwt_secret: \"JWT-Secret-gen-1\"\ndefault_redirection_url: https://DOMAIN.com\n\ntotp:\n  disable: false\n  issuer: authelia.com\n  algorithm: sha1 #sha 256 doesn't work with authy\n  digits: 8\n  period: 30\n  skew: 1\n  secret_size: 32\n\nduo_api:\n  hostname: api-hostname.duosecurity.com # from your duo dashboard\n  integration_key: integ-key-from-duo-dash\n  secret_key: secret-key-from-duo-dash\n  disable: false\n  enable_self_enrollment: false\n\nntp:\n  address: \"time.cloudflare.com:123\"\n  version: 4\n  max_desync: 3s\n  disable_startup_check: false\n  disable_failure: false\n\n\nauthentication_backend:\n  file:\n    path: /config/users_database.yml\n    password:\n      algorithm: argon2id\n      iterations: 1\n      salt_length: 16\n      parallelism: 8\n      memory: 1024\n\naccess_control:\n  default_policy: deny\n  rules:\n\n  ## Bypass rules for domains\n  - domain:\n      - \"authelia.DOMAIN.com\" #otherwise you will be in loop\n      - \"subdomain.DOMAIN.com\"\n    policy: bypass\n\n  ## Bypass api / triggers\n  - domain: \"*.DOMAIN.com\"\n    resources:\n      - \"^/api([/?].*)?$\"\n      - \"^/identity.*$\"\n      - \"^/triggers.*$\"\n      - \"^/meshagents.*$\"\n      - \"^/meshsettings.*$\"\n      - \"^/agent.*$\"\n      - \"^/control.*$\"\n      - \"^/meshrelay.*$\"\n      - \"^/wl.*$\"\n    policy: bypass\n\n  ## Catch-all\n  - domain: \"*.DOMAIN.com\"\n    subject:\n    - \"group:admins\"\n    policy: two_factor\n\nsession:\n  name: authelia_session\n  domain: DOMAIN.com\n  same_site: lax\n  secret: \"second-secret-key-from-site\"\n  expiration: 1h\n  inactivity: 5m\n  remember_me_duration: 2M\n  redis:\n    host: redis_authelia\n    port: 6379\n    password: redis-password-from-docker-compose\n    database_index: 0 #change if using multiple services off single db\n    maximum_active_connections: 10\n    minimum_idle_connections: 0\n\nregulation:\n  max_retries: 3\n  find_time: 10m\n  ban_time: 12h\n\nstorage:\n  encryption_key: \"third-secret-key-from-site\"\n  mysql:\n    host: mariadb_authelia\n    port: 3306\n    database: authelia\n    username: authelia\n    password: \"mariadb-user-pass-from-docker-compose\"\n\nnotifier:\n  smtp:\n    host: smtp.gmail.com\n    port: 587\n    username: email@gmail.com\n    password: password-from-google-account-dashboard\n    sender: authelia@DOMAIN.com\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/authelia/#users_databaseyml","title":"users_database.yml","text":"YAML<pre><code>users:\n    my_username:\n        displayname: Display Name\n        # Use this command to generate password\n        # docker run --rm authelia/authelia:latest authelia hash-password 'authelia'\n        # Password is Authelia\n        password: \"$argon2id$v=19$m=65536,t=1,p=8$cUI4a0E3L1laYnRDUXl3Lw$ZsdsrdadaoVIaVj8NltA8x4qVOzT+/r5GF62/bT8OuAs\"\n        email: email@gmail.com #reset password links are sent here\n        groups:\n            - admins\n            - dev\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/cloudflare-ddns/","title":"Cloudflare-DDNS","text":"","tags":["Docker","Networking"]},{"location":"networking/cloudflare-ddns/#description","title":"Description","text":"<p>This small Alpine Linux based Docker image by Oznu will allow you to use the free CloudFlare DNS Service as a Dynamic DNS Provider (DDNS).</p>","tags":["Docker","Networking"]},{"location":"networking/cloudflare-ddns/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/cloudflare-ddns/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Cloudflare-DDNS Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/cloudflare-ddns/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '2'\nservices:\n  cloudflare-ddns:\n    image: oznu/cloudflare-ddns:latest\n    container_name: cflare-ddns\n    networks:\n      - proxy # rename this to your custom docker network\n    restart: always\n    environment:\n      - API_KEY=$CF_DDNS_API\n      - ZONE=$CF_CLOUD_DOMAIN\n      - SUBDOMAIN=$CF_DDNS_HOME\n      - PROXIED=false\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/cloudflare-ddns/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/cloudflared/","title":"Cloudflare Tunnel","text":"","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#description","title":"Description","text":"<p>Cloudflare Tunnel provides you with a secure way to connect your resources to Cloudflare without a publicly routable IP address</p> <p>Todo</p> <p>Create a script to update cloudflared</p> <p>Note</p> <p>Deploy using Docker since auto-updation and management is easier that way</p>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#bare-metal","title":"Bare Metal","text":"","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>cloudflared</code></li> <li> Other packages: <code>wget</code> <code>tar</code></li> <li> Repo: Github</li> <li> Website: Official Wiki</li> </ul>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#getting-started","title":"Getting started","text":"<p>Note</p> <p>These scripts are written by me and tested only on my personal environment Use at your own risk</p>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#installation-and-uninstallation-scripts","title":"Installation and Uninstallation scripts","text":"<ul> <li> <p> Use this script to install <code>cloudflared</code> on Debian, Ubuntu etc   debInstall.sh<pre><code>#!/bin/bash\nif (( $EUID != 0 )); then\n  printf \"This script must be run as root\"\n  exit 1\nfi\n\nif [ $(which cloudflared) ]; then\n  printf \"Cloudflare is already installed\"\n  exit 0;\nelse\n\n  cpuArch=$(uname -m)\n\n  #checking if cloudflared dir exists in root's home dir\n  if [ -d \"/root/.cloudflared\" ]; then\n    printf \"Moving /root/.cloudflared to /root/.cloudflared-BAK\\n\"\n    mv /root/.cloudflared /root/.cloudflared-BAK\n  fi\n\n  # directory setup\n  mkdir -p /root/.cloudflared\n  chmod -R 777 /root/.cloudflared\n\n  # assigning wget with options and url to var\n  downloader=\"wget --no-check-certificate --content-disposition -P /root/.cloudflared/ https://github.com/cloudflare/cloudflared/releases/latest/download/\"\n\n  # downloading relevant package based on architecture\n  # https://gist.github.com/jwebcat/5122366\n  case $cpuArch in\n\n    amd64 | x86_64)\n      ${downloader}cloudflared-linux-amd64.deb\n      ;;\n\n    x86)\n      ${downloader}cloudflared-linux-386.deb\n      ;;\n\n    aarch64 | arm64 | armv8)\n      ${downloader}cloudflared-linux-arm64.deb\n      ;;\n\n    armv6l | armv6 | arm)\n      ${downloader}cloudflared-linux-arm.deb\n      ;;\n  esac\n\n  # Installing package\n  printf \"\\nInstalling Cloudflared\\n\"\n  sudo dpkg -i /root/.cloudflared/cloudflared-linux-*\n  rm /root/.cloudflared/cloudflared-linux-*\n\n  printf \"\\nIf this installation method failed for you, clean the files and build from source. For pi-zero, a build script is in the repo\\n\"\n  unset cpuArch downloader\n  exit 0;\nfi\n</code></pre></p> </li> <li> <p> Use this script to build <code>cloudflared</code> on Pi-Zero running Pi-OS   buildArmhf.sh<pre><code>#!/bin/sh\nif (( $EUID != 0 )); then\n  printf \"This script must be run as root\"\n  exit 1;\nfi\n\n# checking if os is armhf; true==continue else exit\nif [[ $(uname -m) = \"armv6l\" || $(uname -m) = \"armv6\" || $(uname -m) = \"arm\" ]]; then\n\n  # prep\n  export GOLANG=\"$(curl -s https://go.dev/dl/ | awk -F[\\&gt;\\&lt;] '/linux-armv6l/ &amp;&amp; !/beta/ {print $5;exit}')\"\n  # function declaration\n  goInstallFn() {\n  wget https://golang.org/dl/$GOLANG\n  tar -C /usr/local -xzf $GOLANG\n  rm $GOLANG\n  unset GOLANG\n  printf 'PATH=$PATH:/usr/local/go/bin \\nGOPATH=$HOME/golang\\n' &gt;&gt; ~/.profile\n  source ~/.profile\n  }\n\n  cfTunnelInstall(){\n    git clone https://github.com/cloudflare/cloudflared.git\n    cd cloudflared\n    make cloudflared\n    go install github.com/cloudflare/cloudflared/cmd/cloudflared\n    mv /root/cloudflared/cloudflared /usr/bin/cloudflared\n  }\n\n  #checking if golang is already installed\n  source ~/.profile\n  if [ $(which go) ]; then\n\n    #Go and Cloudflare installation section\n    # check credit for command\n    # explaination: reversing the ouptut of curl then cutting by char 1-20 and displaying the output of non-matching patter and reversing output again\n    goLatestVer=\"$(printf \"$GOLANG\" | rev | cut -b 1-20 --complement | rev)\"\n    installedVer=\"$(go version | cut -d ' ' -f 3)\" # cutting the output to show 3rd field with delimiter==space\n\n    if [[ \"$goLatestVer\" = \"$installedVer\" ]]; then\n      printf \"Latest version of go is installed. Building cloudflared now\"\n      if [ $(which cloudflared) ]; then\n        printf \"Cloudflare is already installed\"\n        unset goLatestVer installedVer\n        exit 0;\n      else\n        cfTunnelInstall\n        unset goLatestVer installedVer\n        exit 0;\n      fi\n    else\n      printf \"Current Go installation is outtaded. Remove the old version and re-run script\"\n      unset goLatestVer installedVer\n      exit 1;\n    fi\n  else\n    printf \"Installing Golang!\"\n    goInstallFn\n    printf \"Building cloudflare tunnel package now!\"\n    if [ $(which cloudflared) ]; then\n      printf \"Cloudflare is already installed\"\n      unset goLatestVer installedVer\n      exit 0;\n    else\n      cfTunnelInstall\n      unset goLatestVer installedVer\n      exit 0;\n    fi\n  fi\n\nelse\n  printf \"\\nNot an armv6 system! Try: https://github.com/Hudater/services/blob/main/hardware/cloudflared/debInstall.sh\"\n  exit 1;\nfi \n</code></pre></p> </li> <li> <p> Use this script to Uninstall <code>cloudflared</code> uninstall.sh<pre><code>#!/bin/sh\nprintf \"WARNING: Use this script if tunnel is installed via CLI\\n\"\n\nprintf \"Enter A/a to delete tunnel and binary or B/b to just uninstall binary. Anything else to exit\\n\"\nread userInput\ncase $userInput in\n  A|a)\n    printf \"\\nYour tunnels are:\\n $(cloudflared tunnel list)\\n\"\n    printf \"\\nEnter your tunnel name to delete: \"\n    read userInput\n    printf $userInput\n    cloudflared tunnel delete $userInput\n    printf \"\\nUninstalling cloudflared binary!\\n\"\n    dpkg -r cloudflared\n    mv /root/.cloudflared /root/.cloudflared-BAK\n    exit 0;\n    ;;\n\n  N|n)\n    printf \"\\nYour tunnel is untouched.\\n\"\n    printf \"\\nUninstalling cloudflared binary!\\n\"\n    dpkg -r cloudflared\n    mv /root/.cloudflared /root/.cloudflared-BAK\n    exit 0;\n    ;;\n\n  *)\n    printf \"Invalid input. Exiting with code 1\"\n    exit 1;\n    ;;\nesac\n</code></pre></p> </li> </ul>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#configuration","title":"Configuration","text":"<ul> <li> <p> Tunnel deployment script   Bash<pre><code>#!/bin/sh\nif (( $EUID != 0 )); then\n  echo \"This script must be run as root\"\n  exit 1;\nfi\n\nprintf \"WARNING: Must have already logged in your cloudflare account in browser beofre running script\\n\"\nprintf \"If logged in, Enter Y/y to continue else any other key to exit\\n\"\nread contLogin\ncase $contLogin in\n  Y|y)\n    if [ $(which cloudflared) ]; then\n      cloudflared tunnel login\n\n      printf \"Enter name for your tunnel: \"\n      read tunName\n      cloudflared tunnel create $tunName\n\n      wget -O /root/.cloudflared/config.yml https://raw.githubusercontent.com/Hudater/services/main/hardware/cloudflared/config.yml\n      read -s -n 1 -p \"Copy tunnel UUID and press ENTER to open config file in nano\"\n      nano /root/.cloudflared/config.yml\n\n      printf \"Enter your desired hostname (ex: home.example.com): \"\n      read hostName\n      cloudflared tunnel route dns $tunName $hostName\n\n      cloudflared service install\n      systemctl enable --now cloudflared.service\n\n      unset contLogin tunName hostName\n      exit 0;\n    else\n      printf \"Cloudflared is not installed. Try: https://github.com/Hudater/services/blob/main/hardware/cloudflared/debInstall.sh\\n\"\n    fi\n    ;;\n\n  *)\n    printf \"Exiting script with code 1\\n\"\n    unset contLogin\n    exit 1;\n    ;;\nesac\n</code></pre></p> </li> <li> <p> Config file   config.yml<pre><code>#example config by IBRACORP. Modified for a scirpt of mine\n#credit: https://docs.ibracorp.io/cloudflare-tunnel/#create-the-config.yaml\ntunnel: UUID\ncredentials-file: /root/.cloudflared/UUID.json\n\n# forward all traffic to Reverse Proxy w/ SSL\ningress:\n  - service: https://REVERSEPROXYIP:PORT #example https://192.168.29.12:443\n    originRequest:\n      originServerName: optional-subdomain.enter-your-domain.com #examples: example.com, home.example.com, *.example.com\n</code></pre></p> </li> </ul>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#docker","title":"Docker","text":"","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#basic-info_1","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Docs for config setup</li> </ul>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#prerequisite","title":"Prerequisite","text":"<ul> <li> <p> Run these commands to get a <code>cert.pem</code> and <code>UUID.json</code> file</p> </li> <li> <p> Retrieving necessary files</p> Get cert.pem file<pre><code>docker run -v $PWD/cloudflared:/.cloudflared erisamoe/cloudflared login\n</code></pre> Get UUID.json file<pre><code>docker run -v $PWD/cloudflared:/etc/cloudflared erisamoe/cloudflared tunnel create traefikHome\n</code></pre> </li> <li> <p> Config.yml setup config.yml<pre><code>tunnel: TUNNEL-UUID-HERE\ncredentials-file: /etc/cloudflared/PATH-TO-TUNNEL-UUID.json\ningress:\n  - service: https://192.168.29.10:443 #your traefik's https entrypoint\n    originRequest:\n      originServerName: DOMAIN.com #root of your domain\n</code></pre></p> </li> <li> <p> Cloudflare DNS Setup</p> TYPE NAME CONETENT <code>CNAME</code> @ UUID.cfargotunnel.com <code>CNAME</code> * @ </li> </ul>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#docker-composeyml","title":"docker compose.yml","text":"YAML<pre><code>---\nservices:\n  cloudflared:\n    image: erisamoe/cloudflared:latest\n    restart: unless-stopped\n    container_name: cloudflared\n    command: tunnel run traefikHome\n    depends_on:\n      - mycontainer\n    volumes:\n      - \"${BAK_CFG_DIR}/cloudflared:/etc/cloudflared\"\n    networks:\n      - proxy\n\nnetworks:\n  proxy:\n    external: true\n</code></pre>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/cloudflared/#deploysh","title":"deploy.sh","text":"Bash<pre><code>#!/bin/sh\ndocker compose up -d\n</code></pre>","tags":["Bare Metal","Docker","Networking"]},{"location":"networking/duckdns/","title":"DuckDNS","text":"","tags":["Docker","Networking"]},{"location":"networking/duckdns/#description","title":"Description","text":"<p>DuckDNS is free dynamic DNS service hosted on AWS. It provides 5 subdomains for free</p>","tags":["Docker","Networking"]},{"location":"networking/duckdns/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/duckdns/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Linuxserver Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/duckdns/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.1\"\nservices:\n  duckdns:\n    image: linuxserver/duckdns:arm32v6-latest #using this on pi zero so armv6 is tagged\n    container_name: duckdns\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - PUID=${PUID} #optional\n      - PGID=${PGID} #optional\n      - TZ=${TZ}\n      - SUBDOMAINS=\"${DD_PRI}\",\"${DD_SEC}\"\n      - TOKEN=\"${DD_TOKEN}\"\n      - LOG_FILE=true #optional\n    volumes:\n      - \"${CFG_DIR}/duckdns:/config\" #optional\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/duckdns/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${CFG_DIR}\"/duckdns\ndocker compose up -d\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/librespeed/","title":"Librespeed","text":"","tags":["Docker","Networking"]},{"location":"networking/librespeed/#description","title":"Description","text":"<p>LibreSpeed is a Free and Open Source speedtest that you can host on your server(s), and users can run in their browser.</p> <p>Note</p> <p>Follow this link to change the Front-end UI</p>","tags":["Docker","Networking"]},{"location":"networking/librespeed/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/librespeed/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>3006</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Librespeed Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/librespeed/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"3.1\"\nservices:\n  librespeed:\n    image: linuxserver/librespeed:latest\n    container_name: librespeed\n    networks:\n      - proxy\n    environment:\n      - PUID=${PUID}\n      - PGID=${PGID}\n      - TZ=${TZ}\n      - DOCKER_MODS=ghcr.io/gilbn/theme.park:librespeed\n      - TP_THEME=dark\n      # - PASSWORD=PASSWORD\n      # - CUSTOM_RESULTS=false #optional\n      # - DB_TYPE=sqlite #optional\n      # - DB_NAME=DB_NAME #optional\n      # - DB_HOSTNAME=DB_HOSTNAME #optional\n      # - DB_USERNAME=DB_USERNAME #optional\n      # - DB_PASSWORD=DB_PASSWORD #optional\n      # - DB_PORT=DB_PORT #optional\n    volumes:\n      - \"${CFG_DIR}/librespeed:/config\"\n    ports:\n      - 3006:80\n    labels:\n      traefik.enable: true\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/librespeed/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/librespeed\ndocker compose up -d\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/rickroll/","title":"Rickroll","text":"","tags":["Docker","Networking"]},{"location":"networking/rickroll/#description","title":"Description","text":"<p>Self explanatory</p>","tags":["Docker","Networking"]},{"location":"networking/rickroll/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/rickroll/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>6519</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/rickroll/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: \"2.4\"\nservices:\n  rickroll:\n    image: modem7/docker-rickroll:onclick\n    container_name: rickroll\n    networks:\n      - proxy # rename this to your custom docker network\n    labels:\n      traefik.enable: true\n    ports:\n      - 6519:8080\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/rickroll/#deploysh","title":"deploy.sh","text":"Bash<pre><code>docker compose up -d\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/shadowsocks/","title":"Shadowsocks","text":"","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#description","title":"Description","text":"<p>Shadowsocks is a secure split proxy loosely based on SOCKS5</p>","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#bare-metal","title":"Bare Metal","text":"","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Package: <code>shadowsocks-libev</code></li> <li> Guide I Followed: LinuxBabe.com</li> <li> Repo: Github</li> <li> Website: Official Shadowsocks Wiki</li> </ul>","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#getting-started","title":"Getting started","text":"<p>Warning</p> <p>This Guide assumes there's no firewall like UFW</p> <p>Todo</p> <p>Move client-side to opnsense</p>","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#server-side","title":"Server Side","text":"<ul> <li> <p> Install Shadowsocks-libev     Bash<pre><code>sudo apt update\nsudo apt install shadowsocks-libev\n</code></pre></p> </li> <li> <p> Edit <code>config.json</code> file     sudoedit /etc/shadowsocks-libev/config.json<pre><code>{\n  \"server\":[\"::1\", \"0.0.0.0\"],\n  \"mode\":\"tcp_and_udp\",\n  \"server_port\":8969,\n  \"local_port\":1080,\n  \"password\":\"PutALongPasswordHere\",\n  \"timeout\":60,\n  \"method\":\"chacha20-ietf-poly1305\"\n}\n</code></pre></p> </li> <li> <p> IPTables (Dumping here in case needed later)     Bash<pre><code>sudo iptables -I INPUT -p tcp --dport 8969 -j ACCEPT\nsudo iptables -I INPUT -p udp --dport 8969 -j ACCEPT\n</code></pre></p> <ul> <li> To Persist iptables</li> </ul> </li> <li> <p> Start and Enable service     Bash<pre><code>sudo systemctl enable shadowsocks-libev.service --now\n</code></pre></p> </li> <li> <p> Check service status     Bash<pre><code>sudo systemctl status shadowsocks-libev.service\n</code></pre></p> </li> </ul> <p>Warning</p> <p>If shadowsocks service errors out due to lacking entropy, install <code>rng-tools</code> and run <code>sudo rngd -r /dev/urandom</code></p>","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#client-side","title":"Client Side","text":"<ul> <li> <p> Install Shadowsocks-libev     Bash<pre><code>sudo apt update\nsudo apt install shadowsocks-libev\n</code></pre></p> </li> <li> <p> Edit <code>location.json</code> file (Change <code>location</code> to your desired name for file)     sudoedit /etc/shadowsocks-libev/zurich.json<pre><code>{\n  \"server\":[\"server.ip.or.domain\"],\n  \"mode\":\"tcp_and_udp\",\n  \"server_port\":8969,\n  \"local_address\":\"media.lan\",\n  \"local_port\":1080,\n  \"password\":\"samePasswordAsServerHere\",\n  \"timeout\":60,\n  \"method\":\"chacha20-ietf-poly1305\"\n}\n</code></pre></p> </li> <li> <p> Start and Enable service     Bash<pre><code>sudo systemctl enable shadowsocks-libev-local@zurich.service --now\n</code></pre></p> </li> <li> <p> Check service status     Bash<pre><code>sudo systemctl status shadowsocks-libev-local@zurich.service\n</code></pre></p> </li> </ul>","tags":["Bare Metal","Networking"]},{"location":"networking/shadowsocks/#prowlarr","title":"Prowlarr","text":"<p>Note</p> <p>Prowlarr connects to your client on LAN</p> <ul> <li> <p> Go to <code>Settings -&gt; Indexers</code></p> </li> <li> <p> Add a new SOCKS5 Proxy</p> </li> <li> <p> Options to fill out     Bash<pre><code>Name= asDesired\nTags= sonarr radarr lidarr #Applies to indexers with at least one matching tag\nHost= 192.168.29.11 #your local_address from location.json\nPort= 1080\n\n## Leave Username and Password empty since we didn't set any on client\n</code></pre></p> </li> <li> <p> Go to <code>Settings -&gt; Apps</code></p> <ul> <li> Put <code>Sync Level</code> to <code>Full Sync</code> for all the Applications</li> </ul> </li> </ul>","tags":["Bare Metal","Networking"]},{"location":"networking/traefik/","title":"Traefik","text":"","tags":["Docker","Networking"]},{"location":"networking/traefik/#description","title":"Description","text":"<p>Traefik is an open-source Edge Router that makes publishing your services a fun and easy experience</p> <p>Note</p> <p>Traefik or reverse-proxy/proxy is a huge topic in itself. For best explaination on Engineering side, refer to Hussein Nasser Other guides I recommend are Techno Tim and IBRACORP</p>","tags":["Docker","Networking"]},{"location":"networking/traefik/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/traefik/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Ingress Ports: <code>80</code> <code>443</code></li> <li> Web-GUI Port: <code>8080</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Traefik Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/traefik/#docker-composeyml","title":"docker-compose.yml","text":"YAML<pre><code>---\nversion: '3'\nservices:\n  traefik:\n    container_name: traefik\n    image: traefik:latest\n    security_opt:\n      - no-new-privileges:true\n    ports:\n      - 80:80\n      - 443:443\n      - 8080:8080\n    volumes:\n      - \"${BAK_CFG_DIR}/traefik/:/etc/traefik/\"\n    networks:\n      - proxy # rename this to your custom docker network\n    labels:\n      traefik.enable: true   # Enable Traefik reverse proxy for the Traefik dashboard.\n      traefik.http.routers.api.rule: Host(`traefik.${CF_DOMAIN}`)    # Define the subdomain for the traefik dashboard.\n      traefik.http.routers.api.entryPoints: https    # Set the Traefik entry point.\n      traefik.http.routers.api.service: api@internal    # Enable Traefik API.\n    environment:\n      CF_DNS_API_TOKEN: \"${CF_DNS_API_TOKEN}\"\n      CF_API_EMAIL: \"${CF_API_EMAIL}\"\n    restart: unless-stopped\n    depends_on:\n      - dockersocket\n\n  dockersocket:\n    container_name: dockersocket\n    image: tecnativa/docker-socket-proxy\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      - proxy\n    environment:\n      CONTAINERS: 1\n      POST: 0\n    privileged: true\n    restart: unless-stopped\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/traefik/#deploysh","title":"deploy.sh","text":"Bash<pre><code>mkdir -p \"${BAK_CFG_DIR}\"/traefik\ndocker compose up -d\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/traefik/#configuration","title":"Configuration","text":"<p>There are config files I use for Traefik configuration</p>","tags":["Docker","Networking"]},{"location":"networking/traefik/#traefikyml","title":"traefik.yml","text":"YAML<pre><code>global:\n  checkNewVersion: true\n  sendAnonymousUsage: false\n\nserversTransport:\n  insecureSkipVerify: true\n\nentryPoints:\n  http:\n    address: :80\n    forwardedHeaders:\n      trustedIPs: &amp;trustedIps\n        - 173.245.48.0/20\n        - 103.21.244.0/22\n        - 103.22.200.0/22\n        - 103.31.4.0/22\n        - 141.101.64.0/18\n        - 108.162.192.0/18\n        - 190.93.240.0/20\n        - 188.114.96.0/20\n        - 197.234.240.0/22\n        - 198.41.128.0/17\n        - 162.158.0.0/15\n        - 104.16.0.0/12\n        - 172.64.0.0/13\n        - 131.0.72.0/22\n        - 2400:cb00::/32\n        - 2606:4700::/32\n        - 2803:f800::/32\n        - 2405:b500::/32\n        - 2405:8100::/32\n        - 2a06:98c0::/29\n        - 2c0f:f248::/32\n    http:\n      redirections:\n        entryPoint:\n          to: https\n          scheme: https\n\n  https:\n    address: :443\n    forwardedHeaders:\n      trustedIPs: *trustedIps\n    http:\n      tls:\n        certResolver: letsencrypt\n        domains:\n          - main: DOMAIN.com\n            sans:\n              - '*.DOMAIN.com'\n      middlewares:\n        - securityHeaders@file\n        - auth@file\n\nproviders:\n  providersThrottleDuration: 2s\n\n  file:\n    filename: /etc/traefik/fileConfig.yml\n    watch: true\n\n  docker:\n    watch: true\n    network: proxy\n    defaultRule: \"Host(`{{ index .Labels \\\"com.docker.compose.service\\\"}}.DOMAIN.com`)\"\n    swarmModeRefreshSeconds: 15s\n    exposedByDefault: false\n    endpoint: \"tcp://dockersocket:2375\" # Uncomment if you are using docker socket proxy\n\napi:\n  dashboard: true\n  insecure: true\n\nlog:\n  level: DEBUG\n\ncertificatesResolvers:\n  letsencrypt:\n    acme:\n      email: email@gmail.com\n      storage: /etc/traefik/acme.json\n      dnsChallenge:\n        provider: cloudflare\n        # Used to make sure the dns challenge is propagated to the rights dns servers\n        resolvers:\n          - \"1.1.1.1:53\"\n          - \"1.0.0.1:53\"\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/traefik/#fileconfigyml","title":"fileConfig.yml","text":"YAML<pre><code>http:\n  routers:\n    adguard:\n      entryPoints:\n        - https\n      rule: 'Host(`adguard.DOMAIN.com`)'\n      service: adguard\n\n    olivetin:\n      entryPoints:\n        - https\n      rule: 'Host(`olivetin.DOMAIN.com`)'\n      service: olivetin\n\n    homer:\n      entryPoints:\n        - https\n      rule: 'Host(`homer.DOMAIN.com`)'\n      service: homer\n\n  services:\n    adguard:\n      loadBalancer:\n        servers:\n          - url: http://192.168.29.12:80/\n\n    olivetin:\n      loadBalancer:\n        servers:\n          - url: http://192.168.29.12:1337/\n\n    homer:\n      loadBalancer:\n        servers:\n          - url: http://192.168.29.10:8080/\n\n  ## MIDDLEWARES ##\n  middlewares:\n\n    auth:\n      forwardauth:\n        address: \"http://authelia:9091/api/verify?rd=https://authelia.DOMAIN.com/\" #chagne authelia:port to containerName:port\n        trustForwardHeader: true\n        authResponseHeaders:\n          - \"Remote-User\"\n          - \"Remote-Groups\"\n          - \"Remote-Name\"\n          - \"Remote-Email\"\n\n    # Authelia basic auth guard\n    auth-basic:\n      forwardauth:\n        address: \"http://authelia:9091/api/verify?auth=basic\"\n        trustForwardHeader: true\n        authResponseHeaders:\n          - \"Remote-User\"\n          - \"Remote-Groups\"\n          - \"Remote-Name\"\n          - \"Remote-Email\"\n\n    # Security headers\n    securityHeaders:\n      headers:\n        customResponseHeaders:\n          X-Robots-Tag: \"none,noarchive,nosnippet,notranslate,noimageindex\"\n          server: \"\"\n          X-Forwarded-Proto: \"https\"\n        sslProxyHeaders:\n          X-Forwarded-Proto: https\n        referrerPolicy: \"strict-origin-when-cross-origin\"\n        hostsProxyHeaders:\n          - \"X-Forwarded-Host\"\n        customRequestHeaders:\n          X-Forwarded-Proto: \"https\"\n        contentTypeNosniff: true\n        browserXssFilter: true\n        forceSTSHeader: true\n        stsIncludeSubdomains: true\n        stsSeconds: 63072000\n        stsPreload: true\n\ntls:\n  options:\n    default:\n      minVersion: VersionTLS12\n      cipherSuites:\n        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/traefik/#acmejson","title":"acme.json","text":"Text Only<pre><code>Create this file with permissions 600 and keep it empty\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/wgeasy/","title":"WgEasy","text":"","tags":["Docker","Networking"]},{"location":"networking/wgeasy/#description","title":"Description","text":"<p>The easiest way to run WireGuard VPN + Web-based Admin UI</p> <p>Warning</p> <p>You need to expose Ingress Port on your Router for <code>UDP</code> traffic</p>","tags":["Docker","Networking"]},{"location":"networking/wgeasy/#docker","title":"Docker","text":"","tags":["Docker","Networking"]},{"location":"networking/wgeasy/#basic-info","title":"Basic info","text":"<p>Basic info with official links</p> <ul> <li> Web-GUI Port: <code>51821</code> <code>51822</code></li> <li> Ingress Port: <code>51820</code></li> <li> Image: DockerHub</li> <li> Repo: Github</li> <li> Website: Official Wiki</li> </ul>","tags":["Docker","Networking"]},{"location":"networking/wgeasy/#docker-composeyml","title":"docker compose.yml","text":"PrimarySecondaryCloud YAML<pre><code>---\nversion: \"3.8\"\nservices:\n  wgpri:\n    image: weejewel/wg-easy:latest\n    container_name: wgpri\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - WG_HOST=${WG_PRI_DOMAIN}\n      - PASSWORD=${WG_PRI_PASS}\n      - WG_PORT=${WG_PRI_PORT}\n      - WG_DEFAULT_DNS=${LOCAL_DNS}\n        #      - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24 # doesn't work with this option enabled\n    volumes:\n      - ${CFG_DIR}/wgpri:/etc/wireguard\n    labels:\n      traefik.enable: true   # Enable Traefik reverse proxy for the Traefik dashboard.\n      traefik.http.services.wgpri.loadbalancer.server.port: 51821\n    ports:\n      - \"51820:51820/udp\" #wg traffic port; match with WG_PORT\n      - \"51821:51821/tcp\" #webgui port\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: \"3\"\nservices:\n  wgsec:\n    image: weejewel/wg-easy:latest\n    container_name: wgsec\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - WG_HOST=${WG_SEC_DOMAIN}\n      - PASSWORD=${WG_SEC_PASS}\n      - WG_PORT=${WG_SEC_PORT}\n      - WG_DEFAULT_DNS=${LOCAL_DNS}\n        #      - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24 # doesn't work with this option enabled\n    volumes:\n      - ${CFG_DIR}/wgsec:/etc/wireguard\n    ports:\n      - \"51822:51820/udp\" #wg traffic port; match with WG_PORT\n      - \"51821:51821/tcp\" #webgui port\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre> YAML<pre><code>---\nversion: \"3\"\nservices:\n  wgcloud:\n    image: weejewel/wg-easy:latest\n    container_name: wgcloud\n    networks:\n      - proxy # rename this to your custom docker network\n    environment:\n      - WG_HOST=${WG_CL_ZUR}\n      - PASSWORD=${WG_CL_PASS}\n      - WG_PORT=${WG_PRI_PORT}\n      - WG_DEFAULT_DNS=1.1.1.1\n        #      - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24 # doesn't work with this option enabled\n    volumes:\n      - ${CFG_DIR}/wgcloud:/etc/wireguard\n    ports:\n      - \"51820:51820/udp\" #wg traffic port; match with WG_PORT\n      - \"51821:51821/tcp\" #webgui port\n    # labels:\n    #   traefik.enable: true   # Enable Traefik reverse proxy for the Traefik dashboard.\n    #   traefik.http.services.wgpri.loadbalancer.server.port: 51821\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n\nnetworks:\n  proxy:    # rename this to your custom docker network.\n    external: true\n</code></pre>","tags":["Docker","Networking"]},{"location":"networking/wgeasy/#deploysh","title":"deploy.sh","text":"PrimarySecondaryCloud Bash<pre><code>mkdir -p \"${CFG_DIR}\"/wgpri\ndocker compose up -d\n</code></pre> Bash<pre><code>mkdir -p \"${CFG_DIR}\"/wgsec\ndocker compose up -d\n</code></pre> Bash<pre><code>mkdir -p \"${CFG_DIR}\"/wgcloud\ndocker compose up - d\n</code></pre>","tags":["Docker","Networking"]}]}